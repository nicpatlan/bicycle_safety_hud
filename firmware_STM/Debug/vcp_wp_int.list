
vcp_wp_int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007558  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080076e0  080076e0  000176e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007738  08007738  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007738  08007738  00017738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007740  08007740  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007744  08007744  00017744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c14  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d10  20001d10  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d785  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a54  00000000  00000000  0002d8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b58  00000000  00000000  00030348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000085b  00000000  00000000  00030ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000227f0  00000000  00000000  000316fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f359  00000000  00000000  00053eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c41e1  00000000  00000000  00063244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002e04  00000000  00000000  00127428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0012a22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080076c8 	.word	0x080076c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	080076c8 	.word	0x080076c8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b970 	b.w	8000cfc <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	460d      	mov	r5, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	460f      	mov	r7, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4694      	mov	ip, r2
 8000a48:	d965      	bls.n	8000b16 <__udivmoddi4+0xe2>
 8000a4a:	fab2 f382 	clz	r3, r2
 8000a4e:	b143      	cbz	r3, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a54:	f1c3 0220 	rsb	r2, r3, #32
 8000a58:	409f      	lsls	r7, r3
 8000a5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a5e:	4317      	orrs	r7, r2
 8000a60:	409c      	lsls	r4, r3
 8000a62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a66:	fa1f f58c 	uxth.w	r5, ip
 8000a6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a6e:	0c22      	lsrs	r2, r4, #16
 8000a70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a78:	fb01 f005 	mul.w	r0, r1, r5
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	d90a      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a80:	eb1c 0202 	adds.w	r2, ip, r2
 8000a84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a88:	f080 811c 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	f240 8119 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000a92:	3902      	subs	r1, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a12      	subs	r2, r2, r0
 8000a98:	b2a4      	uxth	r4, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aa6:	fb00 f505 	mul.w	r5, r0, r5
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	d90a      	bls.n	8000ac4 <__udivmoddi4+0x90>
 8000aae:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab6:	f080 8107 	bcs.w	8000cc8 <__udivmoddi4+0x294>
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	f240 8104 	bls.w	8000cc8 <__udivmoddi4+0x294>
 8000ac0:	4464      	add	r4, ip
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac8:	1b64      	subs	r4, r4, r5
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11e      	cbz	r6, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40dc      	lsrs	r4, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0xbc>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80ed 	beq.w	8000cbe <__udivmoddi4+0x28a>
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aea:	4608      	mov	r0, r1
 8000aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af0:	fab3 f183 	clz	r1, r3
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d149      	bne.n	8000b8c <__udivmoddi4+0x158>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	d302      	bcc.n	8000b02 <__udivmoddi4+0xce>
 8000afc:	4282      	cmp	r2, r0
 8000afe:	f200 80f8 	bhi.w	8000cf2 <__udivmoddi4+0x2be>
 8000b02:	1a84      	subs	r4, r0, r2
 8000b04:	eb65 0203 	sbc.w	r2, r5, r3
 8000b08:	2001      	movs	r0, #1
 8000b0a:	4617      	mov	r7, r2
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d0e2      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	e9c6 4700 	strd	r4, r7, [r6]
 8000b14:	e7df      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b16:	b902      	cbnz	r2, 8000b1a <__udivmoddi4+0xe6>
 8000b18:	deff      	udf	#255	; 0xff
 8000b1a:	fab2 f382 	clz	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8090 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b24:	1a8a      	subs	r2, r1, r2
 8000b26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2a:	fa1f fe8c 	uxth.w	lr, ip
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b34:	fb07 2015 	mls	r0, r7, r5, r2
 8000b38:	0c22      	lsrs	r2, r4, #16
 8000b3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b3e:	fb0e f005 	mul.w	r0, lr, r5
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b46:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4290      	cmp	r0, r2
 8000b52:	f200 80cb 	bhi.w	8000cec <__udivmoddi4+0x2b8>
 8000b56:	4645      	mov	r5, r8
 8000b58:	1a12      	subs	r2, r2, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b60:	fb07 2210 	mls	r2, r7, r0, r2
 8000b64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b68:	fb0e fe00 	mul.w	lr, lr, r0
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x14e>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x14c>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f200 80bb 	bhi.w	8000cf6 <__udivmoddi4+0x2c2>
 8000b80:	4610      	mov	r0, r2
 8000b82:	eba4 040e 	sub.w	r4, r4, lr
 8000b86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b8a:	e79f      	b.n	8000acc <__udivmoddi4+0x98>
 8000b8c:	f1c1 0720 	rsb	r7, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ba2:	40fd      	lsrs	r5, r7
 8000ba4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba8:	4323      	orrs	r3, r4
 8000baa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bae:	fa1f fe8c 	uxth.w	lr, ip
 8000bb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bb6:	0c1c      	lsrs	r4, r3, #16
 8000bb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc0:	42a5      	cmp	r5, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4464      	add	r4, ip
 8000be4:	1b64      	subs	r4, r4, r5
 8000be6:	b29d      	uxth	r5, r3
 8000be8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bec:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c04:	d26c      	bcs.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	d96a      	bls.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	4464      	add	r4, ip
 8000c0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c12:	fba3 9502 	umull	r9, r5, r3, r2
 8000c16:	eba4 040e 	sub.w	r4, r4, lr
 8000c1a:	42ac      	cmp	r4, r5
 8000c1c:	46c8      	mov	r8, r9
 8000c1e:	46ae      	mov	lr, r5
 8000c20:	d356      	bcc.n	8000cd0 <__udivmoddi4+0x29c>
 8000c22:	d053      	beq.n	8000ccc <__udivmoddi4+0x298>
 8000c24:	b156      	cbz	r6, 8000c3c <__udivmoddi4+0x208>
 8000c26:	ebb0 0208 	subs.w	r2, r0, r8
 8000c2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c32:	40ca      	lsrs	r2, r1
 8000c34:	40cc      	lsrs	r4, r1
 8000c36:	4317      	orrs	r7, r2
 8000c38:	e9c6 7400 	strd	r7, r4, [r6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	f1c3 0120 	rsb	r1, r3, #32
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c50:	fa25 f101 	lsr.w	r1, r5, r1
 8000c54:	409d      	lsls	r5, r3
 8000c56:	432a      	orrs	r2, r5
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c64:	fb07 1510 	mls	r5, r7, r0, r1
 8000c68:	0c11      	lsrs	r1, r2, #16
 8000c6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c72:	428d      	cmp	r5, r1
 8000c74:	fa04 f403 	lsl.w	r4, r4, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x258>
 8000c7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c82:	d22f      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c84:	428d      	cmp	r5, r1
 8000c86:	d92d      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	1b49      	subs	r1, r1, r5
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c94:	fb07 1115 	mls	r1, r7, r5, r1
 8000c98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca0:	4291      	cmp	r1, r2
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x282>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cac:	d216      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000cae:	4291      	cmp	r1, r2
 8000cb0:	d914      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000cb2:	3d02      	subs	r5, #2
 8000cb4:	4462      	add	r2, ip
 8000cb6:	1a52      	subs	r2, r2, r1
 8000cb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cbc:	e738      	b.n	8000b30 <__udivmoddi4+0xfc>
 8000cbe:	4631      	mov	r1, r6
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	e708      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e6e6      	b.n	8000a96 <__udivmoddi4+0x62>
 8000cc8:	4610      	mov	r0, r2
 8000cca:	e6fb      	b.n	8000ac4 <__udivmoddi4+0x90>
 8000ccc:	4548      	cmp	r0, r9
 8000cce:	d2a9      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000cd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	e7a3      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cdc:	4645      	mov	r5, r8
 8000cde:	e7ea      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000ce0:	462b      	mov	r3, r5
 8000ce2:	e794      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce4:	4640      	mov	r0, r8
 8000ce6:	e7d1      	b.n	8000c8c <__udivmoddi4+0x258>
 8000ce8:	46d0      	mov	r8, sl
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cec:	3d02      	subs	r5, #2
 8000cee:	4462      	add	r2, ip
 8000cf0:	e732      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e70a      	b.n	8000b0c <__udivmoddi4+0xd8>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e742      	b.n	8000b82 <__udivmoddi4+0x14e>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d04:	f000 fa34 	bl	8001170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d08:	f000 f80c 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0c:	f000 f874 	bl	8000df8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000d10:	f005 ff7a 	bl	8006c08 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  speed = 0;
 8000d14:	4b02      	ldr	r3, [pc, #8]	; (8000d20 <main+0x20>)
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <main+0x1c>
 8000d1e:	bf00      	nop
 8000d20:	20000118 	.word	0x20000118

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b094      	sub	sp, #80	; 0x50
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0320 	add.w	r3, r7, #32
 8000d2e:	2230      	movs	r2, #48	; 0x30
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f006 fc9c 	bl	8007670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <SystemClock_Config+0xcc>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	4a27      	ldr	r2, [pc, #156]	; (8000df0 <SystemClock_Config+0xcc>)
 8000d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d56:	6413      	str	r3, [r2, #64]	; 0x40
 8000d58:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <SystemClock_Config+0xcc>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	4b22      	ldr	r3, [pc, #136]	; (8000df4 <SystemClock_Config+0xd0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a21      	ldr	r2, [pc, #132]	; (8000df4 <SystemClock_Config+0xd0>)
 8000d6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <SystemClock_Config+0xd0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d80:	2301      	movs	r3, #1
 8000d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d94:	2308      	movs	r3, #8
 8000d96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d98:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000da2:	2307      	movs	r3, #7
 8000da4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da6:	f107 0320 	add.w	r3, r7, #32
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 ffb2 	bl	8002d14 <HAL_RCC_OscConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000db6:	f000 f8d3 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dba:	230f      	movs	r3, #15
 8000dbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	2105      	movs	r1, #5
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 fa13 	bl	8003204 <HAL_RCC_ClockConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000de4:	f000 f8bc 	bl	8000f60 <Error_Handler>
  }
}
 8000de8:	bf00      	nop
 8000dea:	3750      	adds	r7, #80	; 0x50
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40007000 	.word	0x40007000

08000df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b4e      	ldr	r3, [pc, #312]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a4d      	ldr	r2, [pc, #308]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b4b      	ldr	r3, [pc, #300]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b47      	ldr	r3, [pc, #284]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a46      	ldr	r2, [pc, #280]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b44      	ldr	r3, [pc, #272]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	4b40      	ldr	r3, [pc, #256]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a3f      	ldr	r2, [pc, #252]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b3d      	ldr	r3, [pc, #244]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a38      	ldr	r2, [pc, #224]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a31      	ldr	r2, [pc, #196]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <MX_GPIO_Init+0x154>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	482c      	ldr	r0, [pc, #176]	; (8000f50 <MX_GPIO_Init+0x158>)
 8000ea0:	f000 fcaa 	bl	80017f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000eaa:	482a      	ldr	r0, [pc, #168]	; (8000f54 <MX_GPIO_Init+0x15c>)
 8000eac:	f000 fca4 	bl	80017f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4822      	ldr	r0, [pc, #136]	; (8000f50 <MX_GPIO_Init+0x158>)
 8000ec8:	f000 fafa 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	481d      	ldr	r0, [pc, #116]	; (8000f58 <MX_GPIO_Init+0x160>)
 8000ee2:	f000 faed 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4818      	ldr	r0, [pc, #96]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000efa:	f000 fae1 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000efe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	480f      	ldr	r0, [pc, #60]	; (8000f54 <MX_GPIO_Init+0x15c>)
 8000f18:	f000 fad2 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f1c:	2320      	movs	r3, #32
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4809      	ldr	r0, [pc, #36]	; (8000f54 <MX_GPIO_Init+0x15c>)
 8000f30:	f000 fac6 	bl	80014c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2101      	movs	r1, #1
 8000f38:	2006      	movs	r0, #6
 8000f3a:	f000 fa8a 	bl	8001452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f3e:	2006      	movs	r0, #6
 8000f40:	f000 faa3 	bl	800148a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	; 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020c00 	.word	0x40020c00
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40020400 	.word	0x40020400

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x8>
	...

08000f6c <getSpeed>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

float getSpeed() {
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
	return speed;
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <getSpeed+0x18>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	ee07 3a90 	vmov	s15, r3
}
 8000f78:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	20000118 	.word	0x20000118

08000f88 <updateSpeed>:

void updateSpeed(float new_speed) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	ed87 0a01 	vstr	s0, [r7, #4]
	speed = new_speed;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <updateSpeed+0x1c>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	20000118 	.word	0x20000118

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000fe6:	2006      	movs	r0, #6
 8000fe8:	f000 fa28 	bl	800143c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler+0x4>

0800100a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <UsageFault_Handler+0x4>

08001016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001044:	f000 f8e6 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	0000      	movs	r0, r0
	...

08001050 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  current_time = HAL_GetTick();
 8001056:	f000 f8f1 	bl	800123c <HAL_GetTick>
 800105a:	4603      	mov	r3, r0
 800105c:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <EXTI0_IRQHandler+0x88>)
 800105e:	6013      	str	r3, [r2, #0]
  time_interval = current_time - previous_time;
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <EXTI0_IRQHandler+0x88>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <EXTI0_IRQHandler+0x8c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	4a1d      	ldr	r2, [pc, #116]	; (80010e0 <EXTI0_IRQHandler+0x90>)
 800106c:	6013      	str	r3, [r2, #0]
  float speed = (time_interval > 5) ? (2 * RADIUS * 3.14 * 10) / time_interval : 0;    // (uom: mm/ms or m/s) no faster than 5 ms rotation
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <EXTI0_IRQHandler+0x90>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b05      	cmp	r3, #5
 8001074:	d913      	bls.n	800109e <EXTI0_IRQHandler+0x4e>
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <EXTI0_IRQHandler+0x90>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f9e6 	bl	800044c <__aeabi_ui2d>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	a112      	add	r1, pc, #72	; (adr r1, 80010d0 <EXTI0_IRQHandler+0x80>)
 8001086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800108a:	f7ff fb83 	bl	8000794 <__aeabi_ddiv>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f7ff fc65 	bl	8000964 <__aeabi_d2f>
 800109a:	4603      	mov	r3, r0
 800109c:	e001      	b.n	80010a2 <EXTI0_IRQHandler+0x52>
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
  previous_time = current_time;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <EXTI0_IRQHandler+0x88>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <EXTI0_IRQHandler+0x8c>)
 80010aa:	6013      	str	r3, [r2, #0]
  if (speed != 0) {
 80010ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	d003      	beq.n	80010c2 <EXTI0_IRQHandler+0x72>
    updateSpeed(speed);
 80010ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80010be:	f7ff ff63 	bl	8000f88 <updateSpeed>
  }
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 fbb2 	bl	800182c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	00000000 	.word	0x00000000
 80010d4:	40888800 	.word	0x40888800
 80010d8:	20000120 	.word	0x20000120
 80010dc:	2000011c 	.word	0x2000011c
 80010e0:	20000124 	.word	0x20000124

080010e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <OTG_FS_IRQHandler+0x10>)
 80010ea:	f000 fd06 	bl	8001afa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000160c 	.word	0x2000160c

080010f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <SystemInit+0x20>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <SystemInit+0x20>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800111c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001154 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001120:	f7ff ffea 	bl	80010f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	; (800115c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	; (8001168 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114a:	f006 fa99 	bl	8007680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114e:	f7ff fdd7 	bl	8000d00 <main>
  bx  lr    
 8001152:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001154:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001160:	08007748 	.word	0x08007748
  ldr r2, =_sbss
 8001164:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001168:	20001d10 	.word	0x20001d10

0800116c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC_IRQHandler>
	...

08001170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <HAL_Init+0x40>)
 800117a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <HAL_Init+0x40>)
 8001186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_Init+0x40>)
 8001192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001198:	2003      	movs	r0, #3
 800119a:	f000 f94f 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 f808 	bl	80011b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a4:	f7ff ff00 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023c00 	.word	0x40023c00

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x54>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x58>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f967 	bl	80014a6 <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00e      	b.n	8001200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d80a      	bhi.n	80011fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f000 f92f 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_InitTick+0x5c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000000 	.word	0x20000000
 800120c:	20000008 	.word	0x20000008
 8001210:	20000004 	.word	0x20000004

08001214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000008 	.word	0x20000008
 8001238:	20000128 	.word	0x20000128

0800123c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_GetTick+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000128 	.word	0x20000128

08001254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff ffee 	bl	800123c <HAL_GetTick>
 8001260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126c:	d005      	beq.n	800127a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_Delay+0x44>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800127a:	bf00      	nop
 800127c:	f7ff ffde 	bl	800123c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d8f7      	bhi.n	800127c <HAL_Delay+0x28>
  {
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <__NVIC_EnableIRQ+0x38>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	; (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f7ff ff8e 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff29 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff3e 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff8e 	bl	8001390 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5d 	bl	800133c <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff31 	bl	8001300 <__NVIC_EnableIRQ>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffa2 	bl	80013f8 <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	e16b      	b.n	80017b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	f040 815a 	bne.w	80017ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d005      	beq.n	8001512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150e:	2b02      	cmp	r3, #2
 8001510:	d130      	bne.n	8001574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001548:	2201      	movs	r2, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f003 0201 	and.w	r2, r3, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b03      	cmp	r3, #3
 800157e:	d017      	beq.n	80015b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d123      	bne.n	8001604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	220f      	movs	r2, #15
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	08da      	lsrs	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3208      	adds	r2, #8
 80015fe:	69b9      	ldr	r1, [r7, #24]
 8001600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0203 	and.w	r2, r3, #3
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80b4 	beq.w	80017ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b60      	ldr	r3, [pc, #384]	; (80017cc <HAL_GPIO_Init+0x30c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a5f      	ldr	r2, [pc, #380]	; (80017cc <HAL_GPIO_Init+0x30c>)
 8001650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b5d      	ldr	r3, [pc, #372]	; (80017cc <HAL_GPIO_Init+0x30c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001662:	4a5b      	ldr	r2, [pc, #364]	; (80017d0 <HAL_GPIO_Init+0x310>)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a52      	ldr	r2, [pc, #328]	; (80017d4 <HAL_GPIO_Init+0x314>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d02b      	beq.n	80016e6 <HAL_GPIO_Init+0x226>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a51      	ldr	r2, [pc, #324]	; (80017d8 <HAL_GPIO_Init+0x318>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d025      	beq.n	80016e2 <HAL_GPIO_Init+0x222>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a50      	ldr	r2, [pc, #320]	; (80017dc <HAL_GPIO_Init+0x31c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d01f      	beq.n	80016de <HAL_GPIO_Init+0x21e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4f      	ldr	r2, [pc, #316]	; (80017e0 <HAL_GPIO_Init+0x320>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d019      	beq.n	80016da <HAL_GPIO_Init+0x21a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4e      	ldr	r2, [pc, #312]	; (80017e4 <HAL_GPIO_Init+0x324>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0x216>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4d      	ldr	r2, [pc, #308]	; (80017e8 <HAL_GPIO_Init+0x328>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00d      	beq.n	80016d2 <HAL_GPIO_Init+0x212>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <HAL_GPIO_Init+0x32c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d007      	beq.n	80016ce <HAL_GPIO_Init+0x20e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4b      	ldr	r2, [pc, #300]	; (80017f0 <HAL_GPIO_Init+0x330>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_GPIO_Init+0x20a>
 80016c6:	2307      	movs	r3, #7
 80016c8:	e00e      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016ca:	2308      	movs	r3, #8
 80016cc:	e00c      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016ce:	2306      	movs	r3, #6
 80016d0:	e00a      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016d2:	2305      	movs	r3, #5
 80016d4:	e008      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016d6:	2304      	movs	r3, #4
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016da:	2303      	movs	r3, #3
 80016dc:	e004      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016de:	2302      	movs	r3, #2
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_GPIO_Init+0x228>
 80016e6:	2300      	movs	r3, #0
 80016e8:	69fa      	ldr	r2, [r7, #28]
 80016ea:	f002 0203 	and.w	r2, r2, #3
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	4093      	lsls	r3, r2
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f8:	4935      	ldr	r1, [pc, #212]	; (80017d0 <HAL_GPIO_Init+0x310>)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001706:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800172a:	4a32      	ldr	r2, [pc, #200]	; (80017f4 <HAL_GPIO_Init+0x334>)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001730:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001754:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <HAL_GPIO_Init+0x334>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800177e:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_GPIO_Init+0x334>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017a8:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <HAL_GPIO_Init+0x334>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3301      	adds	r3, #1
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	2b0f      	cmp	r3, #15
 80017b8:	f67f ae90 	bls.w	80014dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40013800 	.word	0x40013800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020400 	.word	0x40020400
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020c00 	.word	0x40020c00
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40021400 	.word	0x40021400
 80017ec:	40021800 	.word	0x40021800
 80017f0:	40021c00 	.word	0x40021c00
 80017f4:	40013c00 	.word	0x40013c00

080017f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
 8001804:	4613      	mov	r3, r2
 8001806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001808:	787b      	ldrb	r3, [r7, #1]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001814:	e003      	b.n	800181e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	041a      	lsls	r2, r3, #16
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	619a      	str	r2, [r3, #24]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f806 	bl	800185c <HAL_GPIO_EXTI_Callback>
  }
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40013c00 	.word	0x40013c00

0800185c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af02      	add	r7, sp, #8
 8001878:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e101      	b.n	8001a88 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f005 fbc4 	bl	800702c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2203      	movs	r2, #3
 80018a8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b2:	d102      	bne.n	80018ba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 ffaf 	bl	8003822 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7c1a      	ldrb	r2, [r3, #16]
 80018cc:	f88d 2000 	strb.w	r2, [sp]
 80018d0:	3304      	adds	r3, #4
 80018d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d4:	f001 fe8e 	bl	80035f4 <USB_CoreInit>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2202      	movs	r2, #2
 80018e2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0ce      	b.n	8001a88 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f001 ffa7 	bl	8003844 <USB_SetCurrentMode>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0bf      	b.n	8001a88 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	e04a      	b.n	80019a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3315      	adds	r3, #21
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	3314      	adds	r3, #20
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	b298      	uxth	r0, r3
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	332e      	adds	r3, #46	; 0x2e
 800194a:	4602      	mov	r2, r0
 800194c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	3318      	adds	r3, #24
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	331c      	adds	r3, #28
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	3320      	adds	r3, #32
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	3324      	adds	r3, #36	; 0x24
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	3301      	adds	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	791b      	ldrb	r3, [r3, #4]
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d3af      	bcc.n	800190e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	e044      	b.n	8001a3e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	f203 2355 	addw	r3, r3, #597	; 0x255
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4413      	add	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a0c:	7bfa      	ldrb	r2, [r7, #15]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	791b      	ldrb	r3, [r3, #4]
 8001a42:	7bfa      	ldrb	r2, [r7, #15]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d3b5      	bcc.n	80019b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7c1a      	ldrb	r2, [r3, #16]
 8001a50:	f88d 2000 	strb.w	r2, [sp]
 8001a54:	3304      	adds	r3, #4
 8001a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a58:	f001 ff40 	bl	80038dc <USB_DevInit>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2202      	movs	r2, #2
 8001a66:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00c      	b.n	8001a88 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 ff84 	bl	800498e <USB_DevDisconnect>

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_PCD_Start+0x1c>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e022      	b.n	8001af2 <HAL_PCD_Start+0x62>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d009      	beq.n	8001ad4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d105      	bne.n	8001ad4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001acc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 fe91 	bl	8003800 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 ff32 	bl	800494c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001afa:	b590      	push	{r4, r7, lr}
 8001afc:	b08d      	sub	sp, #52	; 0x34
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f002 fff0 	bl	8004af6 <USB_GetMode>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f040 848c 	bne.w	8002436 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 ff54 	bl	80049d0 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 8482 	beq.w	8002434 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f002 ff41 	bl	80049d0 <USB_ReadInterrupts>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d107      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f002 0202 	and.w	r2, r2, #2
 8001b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 ff2f 	bl	80049d0 <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	2b10      	cmp	r3, #16
 8001b7a:	d161      	bne.n	8001c40 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699a      	ldr	r2, [r3, #24]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0210 	bic.w	r2, r2, #16
 8001b8a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f003 020f 	and.w	r2, r3, #15
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3304      	adds	r3, #4
 8001baa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	0c5b      	lsrs	r3, r3, #17
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d124      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d035      	beq.n	8001c30 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	6a38      	ldr	r0, [r7, #32]
 8001bd8:	f002 fd66 	bl	80046a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001be8:	441a      	add	r2, r3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bfa:	441a      	add	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	615a      	str	r2, [r3, #20]
 8001c00:	e016      	b.n	8001c30 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	0c5b      	lsrs	r3, r3, #17
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d110      	bne.n	8001c30 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001c14:	2208      	movs	r2, #8
 8001c16:	4619      	mov	r1, r3
 8001c18:	6a38      	ldr	r0, [r7, #32]
 8001c1a:	f002 fd45 	bl	80046a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c2a:	441a      	add	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0210 	orr.w	r2, r2, #16
 8001c3e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 fec3 	bl	80049d0 <USB_ReadInterrupts>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c54:	f040 80a7 	bne.w	8001da6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 fec8 	bl	80049f6 <USB_ReadDevAllOutEpInterrupt>
 8001c66:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c68:	e099      	b.n	8001d9e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 808e 	beq.w	8001d92 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f002 feec 	bl	8004a5e <USB_ReadDevOutEPInterrupt>
 8001c86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00c      	beq.n	8001cac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fea2 	bl	80029f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00c      	beq.n	8001cd0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	015a      	lsls	r2, r3, #5
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 ff78 	bl	8002bc0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d008      	beq.n	8001cec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2310      	movs	r3, #16
 8001cea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d030      	beq.n	8001d58 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	2b80      	cmp	r3, #128	; 0x80
 8001d00:	d109      	bne.n	8001d16 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d14:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	3304      	adds	r3, #4
 8001d2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	78db      	ldrb	r3, [r3, #3]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d108      	bne.n	8001d46 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2200      	movs	r2, #0
 8001d38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f005 fa87 	bl	8007254 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d52:	461a      	mov	r2, r3
 8001d54:	2302      	movs	r3, #2
 8001d56:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d008      	beq.n	8001d74 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2320      	movs	r3, #32
 8001d72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	3301      	adds	r3, #1
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9a:	085b      	lsrs	r3, r3, #1
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f47f af62 	bne.w	8001c6a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 fe10 	bl	80049d0 <USB_ReadInterrupts>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dba:	f040 80db 	bne.w	8001f74 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f002 fe31 	bl	8004a2a <USB_ReadDevAllInEpInterrupt>
 8001dc8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001dce:	e0cd      	b.n	8001f6c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80c2 	beq.w	8001f60 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 fe57 	bl	8004a9a <USB_ReadDevInEPInterrupt>
 8001dec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d057      	beq.n	8001ea8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	2201      	movs	r2, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69f9      	ldr	r1, [r7, #28]
 8001e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e18:	4013      	ands	r3, r2
 8001e1a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	799b      	ldrb	r3, [r3, #6]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d132      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	3320      	adds	r3, #32
 8001e46:	6819      	ldr	r1, [r3, #0]
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4403      	add	r3, r0
 8001e56:	331c      	adds	r3, #28
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4419      	add	r1, r3
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4403      	add	r3, r0
 8001e6a:	3320      	adds	r3, #32
 8001e6c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d113      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x3a2>
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3324      	adds	r3, #36	; 0x24
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d108      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001e94:	461a      	mov	r2, r3
 8001e96:	2101      	movs	r1, #1
 8001e98:	f002 fe5e 	bl	8004b58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f005 f951 	bl	800714a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d008      	beq.n	8001ee0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eda:	461a      	mov	r2, r3
 8001edc:	2310      	movs	r3, #16
 8001ede:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d008      	beq.n	8001efc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2340      	movs	r3, #64	; 0x40
 8001efa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d023      	beq.n	8001f4e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f08:	6a38      	ldr	r0, [r7, #32]
 8001f0a:	f001 fe4b 	bl	8003ba4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	3310      	adds	r3, #16
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3304      	adds	r3, #4
 8001f20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	78db      	ldrb	r3, [r3, #3]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d108      	bne.n	8001f3c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	4619      	mov	r1, r3
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f005 f99e 	bl	8007278 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fcbb 	bl	80028d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3301      	adds	r3, #1
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f47f af2e 	bne.w	8001dd0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 fd29 	bl	80049d0 <USB_ReadInterrupts>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f88:	d122      	bne.n	8001fd0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d108      	bne.n	8001fba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fea2 	bl	8002cfc <HAL_PCDEx_LPM_Callback>
 8001fb8:	e002      	b.n	8001fc0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f005 f93c 	bl	8007238 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001fce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f002 fcfb 	bl	80049d0 <USB_ReadInterrupts>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fe4:	d112      	bne.n	800200c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d102      	bne.n	8001ffc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f005 f8f8 	bl	80071ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800200a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f002 fcdd 	bl	80049d0 <USB_ReadInterrupts>
 8002016:	4603      	mov	r3, r0
 8002018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800201c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002020:	f040 80b7 	bne.w	8002192 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2110      	movs	r1, #16
 800203e:	4618      	mov	r0, r3
 8002040:	f001 fdb0 	bl	8003ba4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002048:	e046      	b.n	80020d8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002056:	461a      	mov	r2, r3
 8002058:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800205c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4413      	add	r3, r2
 8002066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800206e:	0151      	lsls	r1, r2, #5
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	440a      	add	r2, r1
 8002074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002078:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800207c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	4413      	add	r3, r2
 8002086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208a:	461a      	mov	r2, r3
 800208c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002090:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	4413      	add	r3, r2
 800209a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a2:	0151      	lsls	r1, r2, #5
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	440a      	add	r2, r1
 80020a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020c2:	0151      	lsls	r1, r2, #5
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	440a      	add	r2, r1
 80020c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d4:	3301      	adds	r3, #1
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	791b      	ldrb	r3, [r3, #4]
 80020dc:	461a      	mov	r2, r3
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d3b2      	bcc.n	800204a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020f2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020f6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7bdb      	ldrb	r3, [r3, #15]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d016      	beq.n	800212e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002110:	f043 030b 	orr.w	r3, r3, #11
 8002114:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002126:	f043 030b 	orr.w	r3, r3, #11
 800212a:	6453      	str	r3, [r2, #68]	; 0x44
 800212c:	e015      	b.n	800215a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800213c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002140:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002144:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002154:	f043 030b 	orr.w	r3, r3, #11
 8002158:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002168:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800216c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800217c:	461a      	mov	r2, r3
 800217e:	f002 fceb 	bl	8004b58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f002 fc1a 	bl	80049d0 <USB_ReadInterrupts>
 800219c:	4603      	mov	r3, r0
 800219e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a6:	d123      	bne.n	80021f0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f002 fcb0 	bl	8004b12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f001 fd6d 	bl	8003c96 <USB_GetDevSpeed>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681c      	ldr	r4, [r3, #0]
 80021c8:	f001 fa08 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 80021cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021d2:	461a      	mov	r2, r3
 80021d4:	4620      	mov	r0, r4
 80021d6:	f001 fa71 	bl	80036bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f004 ffdd 	bl	800719a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f002 fbeb 	bl	80049d0 <USB_ReadInterrupts>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b08      	cmp	r3, #8
 8002202:	d10a      	bne.n	800221a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f004 ffba 	bl	800717e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f002 0208 	and.w	r2, r2, #8
 8002218:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f002 fbd6 	bl	80049d0 <USB_ReadInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	2b80      	cmp	r3, #128	; 0x80
 800222c:	d123      	bne.n	8002276 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800223a:	2301      	movs	r3, #1
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	e014      	b.n	800226a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	b2db      	uxtb	r3, r3
 800225c:	4619      	mov	r1, r3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fb08 	bl	8002874 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	3301      	adds	r3, #1
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	791b      	ldrb	r3, [r3, #4]
 800226e:	461a      	mov	r2, r3
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	4293      	cmp	r3, r2
 8002274:	d3e4      	bcc.n	8002240 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f002 fba8 	bl	80049d0 <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800228a:	d13c      	bne.n	8002306 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800228c:	2301      	movs	r3, #1
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
 8002290:	e02b      	b.n	80022ea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	3318      	adds	r3, #24
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d115      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80022b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	da12      	bge.n	80022e4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	3317      	adds	r3, #23
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	4619      	mov	r1, r3
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fac8 	bl	8002874 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	3301      	adds	r3, #1
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	791b      	ldrb	r3, [r3, #4]
 80022ee:	461a      	mov	r2, r3
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d3cd      	bcc.n	8002292 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002304:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f002 fb60 	bl	80049d0 <USB_ReadInterrupts>
 8002310:	4603      	mov	r3, r0
 8002312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800231a:	d156      	bne.n	80023ca <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800231c:	2301      	movs	r3, #1
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
 8002320:	e045      	b.n	80023ae <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	4413      	add	r3, r2
 800232a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d12e      	bne.n	80023a8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800234a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800234c:	2b00      	cmp	r3, #0
 800234e:	da2b      	bge.n	80023a8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800235c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002360:	429a      	cmp	r2, r3
 8002362:	d121      	bne.n	80023a8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10a      	bne.n	80023a8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a4:	6053      	str	r3, [r2, #4]
            break;
 80023a6:	e008      	b.n	80023ba <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	3301      	adds	r3, #1
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	791b      	ldrb	r3, [r3, #4]
 80023b2:	461a      	mov	r2, r3
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d3b3      	bcc.n	8002322 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80023c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f002 fafe 	bl	80049d0 <USB_ReadInterrupts>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023de:	d10a      	bne.n	80023f6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f004 ff5b 	bl	800729c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 fae8 	bl	80049d0 <USB_ReadInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b04      	cmp	r3, #4
 8002408:	d115      	bne.n	8002436 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f004 ff4b 	bl	80072b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	430a      	orrs	r2, r1
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	e000      	b.n	8002436 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002434:	bf00      	nop
    }
  }
}
 8002436:	3734      	adds	r7, #52	; 0x34
 8002438:	46bd      	mov	sp, r7
 800243a:	bd90      	pop	{r4, r7, pc}

0800243c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_PCD_SetAddress+0x1a>
 8002452:	2302      	movs	r3, #2
 8002454:	e012      	b.n	800247c <HAL_PCD_SetAddress+0x40>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f002 fa47 	bl	8004900 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	4608      	mov	r0, r1
 800248e:	4611      	mov	r1, r2
 8002490:	461a      	mov	r2, r3
 8002492:	4603      	mov	r3, r0
 8002494:	70fb      	strb	r3, [r7, #3]
 8002496:	460b      	mov	r3, r1
 8002498:	803b      	strh	r3, [r7, #0]
 800249a:	4613      	mov	r3, r2
 800249c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	da0f      	bge.n	80024ca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	f003 020f 	and.w	r2, r3, #15
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	3310      	adds	r3, #16
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	3304      	adds	r3, #4
 80024c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	705a      	strb	r2, [r3, #1]
 80024c8:	e00f      	b.n	80024ea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	f003 020f 	and.w	r2, r3, #15
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	3304      	adds	r3, #4
 80024e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024f6:	883a      	ldrh	r2, [r7, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	78ba      	ldrb	r2, [r7, #2]
 8002500:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	785b      	ldrb	r3, [r3, #1]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002514:	78bb      	ldrb	r3, [r7, #2]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d102      	bne.n	8002520 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_PCD_EP_Open+0xaa>
 800252a:	2302      	movs	r3, #2
 800252c:	e00e      	b.n	800254c <HAL_PCD_EP_Open+0xc8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68f9      	ldr	r1, [r7, #12]
 800253c:	4618      	mov	r0, r3
 800253e:	f001 fbcf 	bl	8003ce0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800254a:	7afb      	ldrb	r3, [r7, #11]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002564:	2b00      	cmp	r3, #0
 8002566:	da0f      	bge.n	8002588 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	f003 020f 	and.w	r2, r3, #15
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	3310      	adds	r3, #16
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4413      	add	r3, r2
 800257c:	3304      	adds	r3, #4
 800257e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	705a      	strb	r2, [r3, #1]
 8002586:	e00f      	b.n	80025a8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	f003 020f 	and.w	r2, r3, #15
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	3304      	adds	r3, #4
 80025a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_PCD_EP_Close+0x6e>
 80025be:	2302      	movs	r3, #2
 80025c0:	e00e      	b.n	80025e0 <HAL_PCD_EP_Close+0x8c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68f9      	ldr	r1, [r7, #12]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 fc0d 	bl	8003df0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	460b      	mov	r3, r1
 80025f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025f8:	7afb      	ldrb	r3, [r7, #11]
 80025fa:	f003 020f 	and.w	r2, r3, #15
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4413      	add	r3, r2
 800260e:	3304      	adds	r3, #4
 8002610:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2200      	movs	r2, #0
 8002622:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2200      	movs	r2, #0
 8002628:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800262a:	7afb      	ldrb	r3, [r7, #11]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	b2da      	uxtb	r2, r3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	799b      	ldrb	r3, [r3, #6]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d102      	bne.n	8002644 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	799b      	ldrb	r3, [r3, #6]
 800264c:	461a      	mov	r2, r3
 800264e:	6979      	ldr	r1, [r7, #20]
 8002650:	f001 fcaa 	bl	8003fa8 <USB_EPStartXfer>

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	460b      	mov	r3, r1
 8002668:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	f003 020f 	and.w	r2, r3, #15
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002680:	681b      	ldr	r3, [r3, #0]
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	460b      	mov	r3, r1
 800269c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800269e:	7afb      	ldrb	r3, [r7, #11]
 80026a0:	f003 020f 	and.w	r2, r3, #15
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	3310      	adds	r3, #16
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4413      	add	r3, r2
 80026b2:	3304      	adds	r3, #4
 80026b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2200      	movs	r2, #0
 80026c6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2201      	movs	r2, #1
 80026cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ce:	7afb      	ldrb	r3, [r7, #11]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	799b      	ldrb	r3, [r3, #6]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d102      	bne.n	80026e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	799b      	ldrb	r3, [r3, #6]
 80026f0:	461a      	mov	r2, r3
 80026f2:	6979      	ldr	r1, [r7, #20]
 80026f4:	f001 fc58 	bl	8003fa8 <USB_EPStartXfer>

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	7912      	ldrb	r2, [r2, #4]
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e04f      	b.n	80027c0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002724:	2b00      	cmp	r3, #0
 8002726:	da0f      	bge.n	8002748 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	f003 020f 	and.w	r2, r3, #15
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	3310      	adds	r3, #16
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	4413      	add	r3, r2
 800273c:	3304      	adds	r3, #4
 800273e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	705a      	strb	r2, [r3, #1]
 8002746:	e00d      	b.n	8002764 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	3304      	adds	r3, #4
 800275c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_PCD_EP_SetStall+0x82>
 8002780:	2302      	movs	r3, #2
 8002782:	e01d      	b.n	80027c0 <HAL_PCD_EP_SetStall+0xbe>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68f9      	ldr	r1, [r7, #12]
 8002792:	4618      	mov	r0, r3
 8002794:	f001 ffe0 	bl	8004758 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	7999      	ldrb	r1, [r3, #6]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80027b0:	461a      	mov	r2, r3
 80027b2:	f002 f9d1 	bl	8004b58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	7912      	ldrb	r2, [r2, #4]
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e042      	b.n	800286c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	da0f      	bge.n	800280e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	f003 020f 	and.w	r2, r3, #15
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	3310      	adds	r3, #16
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	3304      	adds	r3, #4
 8002804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	705a      	strb	r2, [r3, #1]
 800280c:	e00f      	b.n	800282e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	f003 020f 	and.w	r2, r3, #15
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	3304      	adds	r3, #4
 8002826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_PCD_EP_ClrStall+0x86>
 800284a:	2302      	movs	r3, #2
 800284c:	e00e      	b.n	800286c <HAL_PCD_EP_ClrStall+0xa4>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	4618      	mov	r0, r3
 800285e:	f001 ffe9 	bl	8004834 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002880:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002884:	2b00      	cmp	r3, #0
 8002886:	da0c      	bge.n	80028a2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	f003 020f 	and.w	r2, r3, #15
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	3310      	adds	r3, #16
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	3304      	adds	r3, #4
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e00c      	b.n	80028bc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 020f 	and.w	r2, r3, #15
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	3304      	adds	r3, #4
 80028ba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68f9      	ldr	r1, [r7, #12]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 fe08 	bl	80044d8 <USB_EPStopXfer>
 80028c8:	4603      	mov	r3, r0
 80028ca:	72fb      	strb	r3, [r7, #11]

  return ret;
 80028cc:	7afb      	ldrb	r3, [r7, #11]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b08a      	sub	sp, #40	; 0x28
 80028da:	af02      	add	r7, sp, #8
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	3310      	adds	r3, #16
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	3304      	adds	r3, #4
 80028fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	429a      	cmp	r2, r3
 8002908:	d901      	bls.n	800290e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e06b      	b.n	80029e6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	429a      	cmp	r2, r3
 8002922:	d902      	bls.n	800292a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3303      	adds	r3, #3
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002932:	e02a      	b.n	800298a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	429a      	cmp	r2, r3
 8002948:	d902      	bls.n	8002950 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	3303      	adds	r3, #3
 8002954:	089b      	lsrs	r3, r3, #2
 8002956:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	68d9      	ldr	r1, [r3, #12]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	4603      	mov	r3, r0
 800296c:	6978      	ldr	r0, [r7, #20]
 800296e:	f001 fe5d 	bl	800462c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	441a      	add	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	441a      	add	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	429a      	cmp	r2, r3
 800299e:	d809      	bhi.n	80029b4 <PCD_WriteEmptyTxFifo+0xde>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d203      	bcs.n	80029b4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1bf      	bne.n	8002934 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d811      	bhi.n	80029e4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	2201      	movs	r2, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	43db      	mvns	r3, r3
 80029da:	6939      	ldr	r1, [r7, #16]
 80029dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029e0:	4013      	ands	r3, r2
 80029e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	333c      	adds	r3, #60	; 0x3c
 8002a08:	3304      	adds	r3, #4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	799b      	ldrb	r3, [r3, #6]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d17b      	bne.n	8002b1e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d015      	beq.n	8002a5c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	4a61      	ldr	r2, [pc, #388]	; (8002bb8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	f240 80b9 	bls.w	8002bac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80b3 	beq.w	8002bac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a52:	461a      	mov	r2, r3
 8002a54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a58:	6093      	str	r3, [r2, #8]
 8002a5a:	e0a7      	b.n	8002bac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a72:	461a      	mov	r2, r3
 8002a74:	2320      	movs	r3, #32
 8002a76:	6093      	str	r3, [r2, #8]
 8002a78:	e098      	b.n	8002bac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f040 8093 	bne.w	8002bac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	4a4b      	ldr	r2, [pc, #300]	; (8002bb8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d90f      	bls.n	8002aae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aaa:	6093      	str	r3, [r2, #8]
 8002aac:	e07e      	b.n	8002bac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	0159      	lsls	r1, r3, #5
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	440b      	add	r3, r1
 8002ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ada:	1ad2      	subs	r2, r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d114      	bne.n	8002b10 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002af8:	461a      	mov	r2, r3
 8002afa:	2101      	movs	r1, #1
 8002afc:	f002 f82c 	bl	8004b58 <USB_EP0_OutStart>
 8002b00:	e006      	b.n	8002b10 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	441a      	add	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	4619      	mov	r1, r3
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f004 fafc 	bl	8007114 <HAL_PCD_DataOutStageCallback>
 8002b1c:	e046      	b.n	8002bac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d124      	bne.n	8002b70 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b42:	6093      	str	r3, [r2, #8]
 8002b44:	e032      	b.n	8002bac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2320      	movs	r3, #32
 8002b60:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f004 fad3 	bl	8007114 <HAL_PCD_DataOutStageCallback>
 8002b6e:	e01d      	b.n	8002bac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d114      	bne.n	8002ba0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d108      	bne.n	8002ba0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	f001 ffdc 	bl	8004b58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f004 fab4 	bl	8007114 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	4f54300a 	.word	0x4f54300a
 8002bbc:	4f54310a 	.word	0x4f54310a

08002bc0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	333c      	adds	r3, #60	; 0x3c
 8002bd8:	3304      	adds	r3, #4
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d90e      	bls.n	8002c14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f004 fa6b 	bl	80070f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d90c      	bls.n	8002c3c <PCD_EP_OutSetupPacket_int+0x7c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	799b      	ldrb	r3, [r3, #6]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d108      	bne.n	8002c3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002c34:	461a      	mov	r2, r3
 8002c36:	2101      	movs	r1, #1
 8002c38:	f001 ff8e 	bl	8004b58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	4f54300a 	.word	0x4f54300a

08002c4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d107      	bne.n	8002c7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c6a:	883b      	ldrh	r3, [r7, #0]
 8002c6c:	0419      	lsls	r1, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
 8002c78:	e028      	b.n	8002ccc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	4413      	add	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	e00d      	b.n	8002caa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	3340      	adds	r3, #64	; 0x40
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d3ec      	bcc.n	8002c8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002cb4:	883b      	ldrh	r3, [r7, #0]
 8002cb6:	0418      	lsls	r0, r3, #16
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6819      	ldr	r1, [r3, #0]
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	4302      	orrs	r2, r0
 8002cc4:	3340      	adds	r3, #64	; 0x40
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e267      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d075      	beq.n	8002e1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d32:	4b88      	ldr	r3, [pc, #544]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d00c      	beq.n	8002d58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3e:	4b85      	ldr	r3, [pc, #532]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d112      	bne.n	8002d70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4a:	4b82      	ldr	r3, [pc, #520]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d56:	d10b      	bne.n	8002d70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d58:	4b7e      	ldr	r3, [pc, #504]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d05b      	beq.n	8002e1c <HAL_RCC_OscConfig+0x108>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d157      	bne.n	8002e1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e242      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d78:	d106      	bne.n	8002d88 <HAL_RCC_OscConfig+0x74>
 8002d7a:	4b76      	ldr	r3, [pc, #472]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a75      	ldr	r2, [pc, #468]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e01d      	b.n	8002dc4 <HAL_RCC_OscConfig+0xb0>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x98>
 8002d92:	4b70      	ldr	r3, [pc, #448]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6f      	ldr	r2, [pc, #444]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b6d      	ldr	r3, [pc, #436]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6c      	ldr	r2, [pc, #432]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e00b      	b.n	8002dc4 <HAL_RCC_OscConfig+0xb0>
 8002dac:	4b69      	ldr	r3, [pc, #420]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a68      	ldr	r2, [pc, #416]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b66      	ldr	r3, [pc, #408]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a65      	ldr	r2, [pc, #404]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fa36 	bl	800123c <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7fe fa32 	bl	800123c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e207      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	4b5b      	ldr	r3, [pc, #364]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0xc0>
 8002df2:	e014      	b.n	8002e1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe fa22 	bl	800123c <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7fe fa1e 	bl	800123c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e1f3      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0e:	4b51      	ldr	r3, [pc, #324]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0xe8>
 8002e1a:	e000      	b.n	8002e1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d063      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e2a:	4b4a      	ldr	r3, [pc, #296]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00b      	beq.n	8002e4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e36:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d11c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e42:	4b44      	ldr	r3, [pc, #272]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d116      	bne.n	8002e7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	4b41      	ldr	r3, [pc, #260]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_RCC_OscConfig+0x152>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e1c7      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e66:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4937      	ldr	r1, [pc, #220]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7a:	e03a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e84:	4b34      	ldr	r3, [pc, #208]	; (8002f58 <HAL_RCC_OscConfig+0x244>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe f9d7 	bl	800123c <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e92:	f7fe f9d3 	bl	800123c <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e1a8      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb0:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4925      	ldr	r1, [pc, #148]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
 8002ec4:	e015      	b.n	8002ef2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_RCC_OscConfig+0x244>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe f9b6 	bl	800123c <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fe f9b2 	bl	800123c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e187      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee6:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d036      	beq.n	8002f6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_RCC_OscConfig+0x248>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe f996 	bl	800123c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f14:	f7fe f992 	bl	800123c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e167      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f26:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_OscConfig+0x240>)
 8002f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x200>
 8002f32:	e01b      	b.n	8002f6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_RCC_OscConfig+0x248>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3a:	f7fe f97f 	bl	800123c <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f40:	e00e      	b.n	8002f60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f42:	f7fe f97b 	bl	800123c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d907      	bls.n	8002f60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e150      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
 8002f54:	40023800 	.word	0x40023800
 8002f58:	42470000 	.word	0x42470000
 8002f5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f60:	4b88      	ldr	r3, [pc, #544]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8002f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ea      	bne.n	8002f42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8097 	beq.w	80030a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7e:	4b81      	ldr	r3, [pc, #516]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10f      	bne.n	8002faa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	4b7d      	ldr	r3, [pc, #500]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	4a7c      	ldr	r2, [pc, #496]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8002f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f98:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9a:	4b7a      	ldr	r3, [pc, #488]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002faa:	4b77      	ldr	r3, [pc, #476]	; (8003188 <HAL_RCC_OscConfig+0x474>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d118      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb6:	4b74      	ldr	r3, [pc, #464]	; (8003188 <HAL_RCC_OscConfig+0x474>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a73      	ldr	r2, [pc, #460]	; (8003188 <HAL_RCC_OscConfig+0x474>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc2:	f7fe f93b 	bl	800123c <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7fe f937 	bl	800123c <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e10c      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fdc:	4b6a      	ldr	r3, [pc, #424]	; (8003188 <HAL_RCC_OscConfig+0x474>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x2ea>
 8002ff0:	4b64      	ldr	r3, [pc, #400]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	4a63      	ldr	r2, [pc, #396]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffc:	e01c      	b.n	8003038 <HAL_RCC_OscConfig+0x324>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b05      	cmp	r3, #5
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x30c>
 8003006:	4b5f      	ldr	r3, [pc, #380]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a5e      	ldr	r2, [pc, #376]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 800300c:	f043 0304 	orr.w	r3, r3, #4
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
 8003012:	4b5c      	ldr	r3, [pc, #368]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	4a5b      	ldr	r2, [pc, #364]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6713      	str	r3, [r2, #112]	; 0x70
 800301e:	e00b      	b.n	8003038 <HAL_RCC_OscConfig+0x324>
 8003020:	4b58      	ldr	r3, [pc, #352]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	4a57      	ldr	r2, [pc, #348]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8003026:	f023 0301 	bic.w	r3, r3, #1
 800302a:	6713      	str	r3, [r2, #112]	; 0x70
 800302c:	4b55      	ldr	r3, [pc, #340]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	4a54      	ldr	r2, [pc, #336]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8003032:	f023 0304 	bic.w	r3, r3, #4
 8003036:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d015      	beq.n	800306c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fe f8fc 	bl	800123c <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	e00a      	b.n	800305e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003048:	f7fe f8f8 	bl	800123c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e0cb      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	4b49      	ldr	r3, [pc, #292]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0ee      	beq.n	8003048 <HAL_RCC_OscConfig+0x334>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306c:	f7fe f8e6 	bl	800123c <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003072:	e00a      	b.n	800308a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003074:	f7fe f8e2 	bl	800123c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e0b5      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308a:	4b3e      	ldr	r3, [pc, #248]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1ee      	bne.n	8003074 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003096:	7dfb      	ldrb	r3, [r7, #23]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d105      	bne.n	80030a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309c:	4b39      	ldr	r3, [pc, #228]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	4a38      	ldr	r2, [pc, #224]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 80030a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80a1 	beq.w	80031f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030b2:	4b34      	ldr	r3, [pc, #208]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d05c      	beq.n	8003178 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d141      	bne.n	800314a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c6:	4b31      	ldr	r3, [pc, #196]	; (800318c <HAL_RCC_OscConfig+0x478>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe f8b6 	bl	800123c <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d4:	f7fe f8b2 	bl	800123c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e087      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e6:	4b27      	ldr	r3, [pc, #156]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	019b      	lsls	r3, r3, #6
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	085b      	lsrs	r3, r3, #1
 800310a:	3b01      	subs	r3, #1
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	491b      	ldr	r1, [pc, #108]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x478>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003122:	f7fe f88b 	bl	800123c <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312a:	f7fe f887 	bl	800123c <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e05c      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313c:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x416>
 8003148:	e054      	b.n	80031f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <HAL_RCC_OscConfig+0x478>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fe f874 	bl	800123c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003158:	f7fe f870 	bl	800123c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e045      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_RCC_OscConfig+0x470>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x444>
 8003176:	e03d      	b.n	80031f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d107      	bne.n	8003190 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e038      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
 8003184:	40023800 	.word	0x40023800
 8003188:	40007000 	.word	0x40007000
 800318c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003190:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <HAL_RCC_OscConfig+0x4ec>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d028      	beq.n	80031f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d121      	bne.n	80031f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d11a      	bne.n	80031f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031c0:	4013      	ands	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d111      	bne.n	80031f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	3b01      	subs	r3, #1
 80031da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800

08003204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0cc      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003218:	4b68      	ldr	r3, [pc, #416]	; (80033bc <HAL_RCC_ClockConfig+0x1b8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d90c      	bls.n	8003240 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b65      	ldr	r3, [pc, #404]	; (80033bc <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b63      	ldr	r3, [pc, #396]	; (80033bc <HAL_RCC_ClockConfig+0x1b8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0b8      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003258:	4b59      	ldr	r3, [pc, #356]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a58      	ldr	r2, [pc, #352]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003262:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003270:	4b53      	ldr	r3, [pc, #332]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4a52      	ldr	r2, [pc, #328]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800327a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800327c:	4b50      	ldr	r3, [pc, #320]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	494d      	ldr	r1, [pc, #308]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	4313      	orrs	r3, r2
 800328c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d044      	beq.n	8003324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d107      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	4b47      	ldr	r3, [pc, #284]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d119      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e07f      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c2:	4b3f      	ldr	r3, [pc, #252]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e06f      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d2:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e067      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032e2:	4b37      	ldr	r3, [pc, #220]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f023 0203 	bic.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	4934      	ldr	r1, [pc, #208]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f4:	f7fd ffa2 	bl	800123c <HAL_GetTick>
 80032f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032fc:	f7fd ff9e 	bl	800123c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	; 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e04f      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	4b2b      	ldr	r3, [pc, #172]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 020c 	and.w	r2, r3, #12
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	429a      	cmp	r2, r3
 8003322:	d1eb      	bne.n	80032fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003324:	4b25      	ldr	r3, [pc, #148]	; (80033bc <HAL_RCC_ClockConfig+0x1b8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d20c      	bcs.n	800334c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b22      	ldr	r3, [pc, #136]	; (80033bc <HAL_RCC_ClockConfig+0x1b8>)
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e032      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003358:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4916      	ldr	r1, [pc, #88]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	490e      	ldr	r1, [pc, #56]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800338a:	f000 f821 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 800338e:	4602      	mov	r2, r0
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	490a      	ldr	r1, [pc, #40]	; (80033c4 <HAL_RCC_ClockConfig+0x1c0>)
 800339c:	5ccb      	ldrb	r3, [r1, r3]
 800339e:	fa22 f303 	lsr.w	r3, r2, r3
 80033a2:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <HAL_RCC_ClockConfig+0x1c8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd ff02 	bl	80011b4 <HAL_InitTick>

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023c00 	.word	0x40023c00
 80033c0:	40023800 	.word	0x40023800
 80033c4:	08007728 	.word	0x08007728
 80033c8:	20000000 	.word	0x20000000
 80033cc:	20000004 	.word	0x20000004

080033d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d4:	b094      	sub	sp, #80	; 0x50
 80033d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	647b      	str	r3, [r7, #68]	; 0x44
 80033dc:	2300      	movs	r3, #0
 80033de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e0:	2300      	movs	r3, #0
 80033e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033e8:	4b79      	ldr	r3, [pc, #484]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d00d      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x40>
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	f200 80e1 	bhi.w	80035bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x34>
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d003      	beq.n	800340a <HAL_RCC_GetSysClockFreq+0x3a>
 8003402:	e0db      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003404:	4b73      	ldr	r3, [pc, #460]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003406:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003408:	e0db      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800340a:	4b73      	ldr	r3, [pc, #460]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800340c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800340e:	e0d8      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003410:	4b6f      	ldr	r3, [pc, #444]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003418:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800341a:	4b6d      	ldr	r3, [pc, #436]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d063      	beq.n	80034ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003426:	4b6a      	ldr	r3, [pc, #424]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	099b      	lsrs	r3, r3, #6
 800342c:	2200      	movs	r2, #0
 800342e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003430:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003438:	633b      	str	r3, [r7, #48]	; 0x30
 800343a:	2300      	movs	r3, #0
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
 800343e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003442:	4622      	mov	r2, r4
 8003444:	462b      	mov	r3, r5
 8003446:	f04f 0000 	mov.w	r0, #0
 800344a:	f04f 0100 	mov.w	r1, #0
 800344e:	0159      	lsls	r1, r3, #5
 8003450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003454:	0150      	lsls	r0, r2, #5
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4621      	mov	r1, r4
 800345c:	1a51      	subs	r1, r2, r1
 800345e:	6139      	str	r1, [r7, #16]
 8003460:	4629      	mov	r1, r5
 8003462:	eb63 0301 	sbc.w	r3, r3, r1
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003474:	4659      	mov	r1, fp
 8003476:	018b      	lsls	r3, r1, #6
 8003478:	4651      	mov	r1, sl
 800347a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800347e:	4651      	mov	r1, sl
 8003480:	018a      	lsls	r2, r1, #6
 8003482:	4651      	mov	r1, sl
 8003484:	ebb2 0801 	subs.w	r8, r2, r1
 8003488:	4659      	mov	r1, fp
 800348a:	eb63 0901 	sbc.w	r9, r3, r1
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800349a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800349e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034a2:	4690      	mov	r8, r2
 80034a4:	4699      	mov	r9, r3
 80034a6:	4623      	mov	r3, r4
 80034a8:	eb18 0303 	adds.w	r3, r8, r3
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	462b      	mov	r3, r5
 80034b0:	eb49 0303 	adc.w	r3, r9, r3
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034c2:	4629      	mov	r1, r5
 80034c4:	024b      	lsls	r3, r1, #9
 80034c6:	4621      	mov	r1, r4
 80034c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034cc:	4621      	mov	r1, r4
 80034ce:	024a      	lsls	r2, r1, #9
 80034d0:	4610      	mov	r0, r2
 80034d2:	4619      	mov	r1, r3
 80034d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d6:	2200      	movs	r2, #0
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034e0:	f7fd fa90 	bl	8000a04 <__aeabi_uldivmod>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4613      	mov	r3, r2
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ec:	e058      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ee:	4b38      	ldr	r3, [pc, #224]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	099b      	lsrs	r3, r3, #6
 80034f4:	2200      	movs	r2, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	4611      	mov	r1, r2
 80034fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034fe:	623b      	str	r3, [r7, #32]
 8003500:	2300      	movs	r3, #0
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
 8003504:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003508:	4642      	mov	r2, r8
 800350a:	464b      	mov	r3, r9
 800350c:	f04f 0000 	mov.w	r0, #0
 8003510:	f04f 0100 	mov.w	r1, #0
 8003514:	0159      	lsls	r1, r3, #5
 8003516:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800351a:	0150      	lsls	r0, r2, #5
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4641      	mov	r1, r8
 8003522:	ebb2 0a01 	subs.w	sl, r2, r1
 8003526:	4649      	mov	r1, r9
 8003528:	eb63 0b01 	sbc.w	fp, r3, r1
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003538:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800353c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003540:	ebb2 040a 	subs.w	r4, r2, sl
 8003544:	eb63 050b 	sbc.w	r5, r3, fp
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	00eb      	lsls	r3, r5, #3
 8003552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003556:	00e2      	lsls	r2, r4, #3
 8003558:	4614      	mov	r4, r2
 800355a:	461d      	mov	r5, r3
 800355c:	4643      	mov	r3, r8
 800355e:	18e3      	adds	r3, r4, r3
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	464b      	mov	r3, r9
 8003564:	eb45 0303 	adc.w	r3, r5, r3
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003576:	4629      	mov	r1, r5
 8003578:	028b      	lsls	r3, r1, #10
 800357a:	4621      	mov	r1, r4
 800357c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003580:	4621      	mov	r1, r4
 8003582:	028a      	lsls	r2, r1, #10
 8003584:	4610      	mov	r0, r2
 8003586:	4619      	mov	r1, r3
 8003588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358a:	2200      	movs	r2, #0
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	61fa      	str	r2, [r7, #28]
 8003590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003594:	f7fd fa36 	bl	8000a04 <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4613      	mov	r3, r2
 800359e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	3301      	adds	r3, #1
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ba:	e002      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3750      	adds	r7, #80	; 0x50
 80035c8:	46bd      	mov	sp, r7
 80035ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	00f42400 	.word	0x00f42400
 80035d8:	007a1200 	.word	0x007a1200

080035dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000000 	.word	0x20000000

080035f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035f4:	b084      	sub	sp, #16
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	f107 001c 	add.w	r0, r7, #28
 8003602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003606:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800360a:	2b01      	cmp	r3, #1
 800360c:	d123      	bne.n	8003656 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003636:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800363a:	2b01      	cmp	r3, #1
 800363c:	d105      	bne.n	800364a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f001 fae2 	bl	8004c14 <USB_CoreReset>
 8003650:	4603      	mov	r3, r0
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e01b      	b.n	800368e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f001 fad6 	bl	8004c14 <USB_CoreReset>
 8003668:	4603      	mov	r3, r0
 800366a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800366c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003670:	2b00      	cmp	r3, #0
 8003672:	d106      	bne.n	8003682 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	639a      	str	r2, [r3, #56]	; 0x38
 8003680:	e005      	b.n	800368e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800368e:	7fbb      	ldrb	r3, [r7, #30]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d10b      	bne.n	80036ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f043 0206 	orr.w	r2, r3, #6
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036b8:	b004      	add	sp, #16
 80036ba:	4770      	bx	lr

080036bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	4613      	mov	r3, r2
 80036c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d165      	bne.n	800379c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4a41      	ldr	r2, [pc, #260]	; (80037d8 <USB_SetTurnaroundTime+0x11c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d906      	bls.n	80036e6 <USB_SetTurnaroundTime+0x2a>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4a40      	ldr	r2, [pc, #256]	; (80037dc <USB_SetTurnaroundTime+0x120>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d202      	bcs.n	80036e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80036e0:	230f      	movs	r3, #15
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e062      	b.n	80037ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4a3c      	ldr	r2, [pc, #240]	; (80037dc <USB_SetTurnaroundTime+0x120>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d306      	bcc.n	80036fc <USB_SetTurnaroundTime+0x40>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4a3b      	ldr	r2, [pc, #236]	; (80037e0 <USB_SetTurnaroundTime+0x124>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d202      	bcs.n	80036fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80036f6:	230e      	movs	r3, #14
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	e057      	b.n	80037ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4a38      	ldr	r2, [pc, #224]	; (80037e0 <USB_SetTurnaroundTime+0x124>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d306      	bcc.n	8003712 <USB_SetTurnaroundTime+0x56>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4a37      	ldr	r2, [pc, #220]	; (80037e4 <USB_SetTurnaroundTime+0x128>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d202      	bcs.n	8003712 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800370c:	230d      	movs	r3, #13
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	e04c      	b.n	80037ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4a33      	ldr	r2, [pc, #204]	; (80037e4 <USB_SetTurnaroundTime+0x128>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d306      	bcc.n	8003728 <USB_SetTurnaroundTime+0x6c>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4a32      	ldr	r2, [pc, #200]	; (80037e8 <USB_SetTurnaroundTime+0x12c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d802      	bhi.n	8003728 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003722:	230c      	movs	r3, #12
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	e041      	b.n	80037ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4a2f      	ldr	r2, [pc, #188]	; (80037e8 <USB_SetTurnaroundTime+0x12c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d906      	bls.n	800373e <USB_SetTurnaroundTime+0x82>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4a2e      	ldr	r2, [pc, #184]	; (80037ec <USB_SetTurnaroundTime+0x130>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d802      	bhi.n	800373e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003738:	230b      	movs	r3, #11
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	e036      	b.n	80037ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4a2a      	ldr	r2, [pc, #168]	; (80037ec <USB_SetTurnaroundTime+0x130>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d906      	bls.n	8003754 <USB_SetTurnaroundTime+0x98>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4a29      	ldr	r2, [pc, #164]	; (80037f0 <USB_SetTurnaroundTime+0x134>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d802      	bhi.n	8003754 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800374e:	230a      	movs	r3, #10
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	e02b      	b.n	80037ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4a26      	ldr	r2, [pc, #152]	; (80037f0 <USB_SetTurnaroundTime+0x134>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d906      	bls.n	800376a <USB_SetTurnaroundTime+0xae>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4a25      	ldr	r2, [pc, #148]	; (80037f4 <USB_SetTurnaroundTime+0x138>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d202      	bcs.n	800376a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003764:	2309      	movs	r3, #9
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e020      	b.n	80037ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4a21      	ldr	r2, [pc, #132]	; (80037f4 <USB_SetTurnaroundTime+0x138>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d306      	bcc.n	8003780 <USB_SetTurnaroundTime+0xc4>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <USB_SetTurnaroundTime+0x13c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d802      	bhi.n	8003780 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800377a:	2308      	movs	r3, #8
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e015      	b.n	80037ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <USB_SetTurnaroundTime+0x13c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d906      	bls.n	8003796 <USB_SetTurnaroundTime+0xda>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <USB_SetTurnaroundTime+0x140>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d202      	bcs.n	8003796 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003790:	2307      	movs	r3, #7
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	e00a      	b.n	80037ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003796:	2306      	movs	r3, #6
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	e007      	b.n	80037ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d102      	bne.n	80037a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80037a2:	2309      	movs	r3, #9
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	e001      	b.n	80037ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80037a8:	2309      	movs	r3, #9
 80037aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	029b      	lsls	r3, r3, #10
 80037c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	00d8acbf 	.word	0x00d8acbf
 80037dc:	00e4e1c0 	.word	0x00e4e1c0
 80037e0:	00f42400 	.word	0x00f42400
 80037e4:	01067380 	.word	0x01067380
 80037e8:	011a499f 	.word	0x011a499f
 80037ec:	01312cff 	.word	0x01312cff
 80037f0:	014ca43f 	.word	0x014ca43f
 80037f4:	016e3600 	.word	0x016e3600
 80037f8:	01a6ab1f 	.word	0x01a6ab1f
 80037fc:	01e84800 	.word	0x01e84800

08003800 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f043 0201 	orr.w	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 0201 	bic.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d115      	bne.n	8003892 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003872:	200a      	movs	r0, #10
 8003874:	f7fd fcee 	bl	8001254 <HAL_Delay>
      ms += 10U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	330a      	adds	r3, #10
 800387c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f001 f939 	bl	8004af6 <USB_GetMode>
 8003884:	4603      	mov	r3, r0
 8003886:	2b01      	cmp	r3, #1
 8003888:	d01e      	beq.n	80038c8 <USB_SetCurrentMode+0x84>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2bc7      	cmp	r3, #199	; 0xc7
 800388e:	d9f0      	bls.n	8003872 <USB_SetCurrentMode+0x2e>
 8003890:	e01a      	b.n	80038c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d115      	bne.n	80038c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80038a4:	200a      	movs	r0, #10
 80038a6:	f7fd fcd5 	bl	8001254 <HAL_Delay>
      ms += 10U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	330a      	adds	r3, #10
 80038ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f001 f920 	bl	8004af6 <USB_GetMode>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <USB_SetCurrentMode+0x84>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2bc7      	cmp	r3, #199	; 0xc7
 80038c0:	d9f0      	bls.n	80038a4 <USB_SetCurrentMode+0x60>
 80038c2:	e001      	b.n	80038c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e005      	b.n	80038d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2bc8      	cmp	r3, #200	; 0xc8
 80038cc:	d101      	bne.n	80038d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038dc:	b084      	sub	sp, #16
 80038de:	b580      	push	{r7, lr}
 80038e0:	b086      	sub	sp, #24
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	e009      	b.n	8003910 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	3340      	adds	r3, #64	; 0x40
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	2200      	movs	r2, #0
 8003908:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	3301      	adds	r3, #1
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b0e      	cmp	r3, #14
 8003914:	d9f2      	bls.n	80038fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003916:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800391a:	2b00      	cmp	r3, #0
 800391c:	d11c      	bne.n	8003958 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800392c:	f043 0302 	orr.w	r3, r3, #2
 8003930:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	639a      	str	r2, [r3, #56]	; 0x38
 8003956:	e00b      	b.n	8003970 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003976:	461a      	mov	r2, r3
 8003978:	2300      	movs	r3, #0
 800397a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800397c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10d      	bne.n	80039a0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800398c:	2100      	movs	r1, #0
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f968 	bl	8003c64 <USB_SetDevSpeed>
 8003994:	e008      	b.n	80039a8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003996:	2101      	movs	r1, #1
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f963 	bl	8003c64 <USB_SetDevSpeed>
 800399e:	e003      	b.n	80039a8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039a0:	2103      	movs	r1, #3
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f95e 	bl	8003c64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039a8:	2110      	movs	r1, #16
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8fa 	bl	8003ba4 <USB_FlushTxFifo>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f924 	bl	8003c08 <USB_FlushRxFifo>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d0:	461a      	mov	r2, r3
 80039d2:	2300      	movs	r3, #0
 80039d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039dc:	461a      	mov	r2, r3
 80039de:	2300      	movs	r3, #0
 80039e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e8:	461a      	mov	r2, r3
 80039ea:	2300      	movs	r3, #0
 80039ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	e043      	b.n	8003a7c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a0a:	d118      	bne.n	8003a3e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e013      	b.n	8003a50 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a34:	461a      	mov	r2, r3
 8003a36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	e008      	b.n	8003a50 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a80:	461a      	mov	r2, r3
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d3b5      	bcc.n	80039f4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	e043      	b.n	8003b16 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aa4:	d118      	bne.n	8003ad8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	e013      	b.n	8003aea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e008      	b.n	8003aea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af6:	461a      	mov	r2, r3
 8003af8:	2300      	movs	r3, #0
 8003afa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	3301      	adds	r3, #1
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d3b5      	bcc.n	8003a8e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b34:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b42:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f043 0210 	orr.w	r2, r3, #16
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <USB_DevInit+0x2c4>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f043 0208 	orr.w	r2, r3, #8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d107      	bne.n	8003b90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b88:	f043 0304 	orr.w	r3, r3, #4
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b9c:	b004      	add	sp, #16
 8003b9e:	4770      	bx	lr
 8003ba0:	803c3800 	.word	0x803c3800

08003ba4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003bbe:	d901      	bls.n	8003bc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e01b      	b.n	8003bfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	daf2      	bge.n	8003bb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	019b      	lsls	r3, r3, #6
 8003bd4:	f043 0220 	orr.w	r2, r3, #32
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3301      	adds	r3, #1
 8003be0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003be8:	d901      	bls.n	8003bee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e006      	b.n	8003bfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d0f0      	beq.n	8003bdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003c20:	d901      	bls.n	8003c26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e018      	b.n	8003c58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	daf2      	bge.n	8003c14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2210      	movs	r2, #16
 8003c36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003c44:	d901      	bls.n	8003c4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e006      	b.n	8003c58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d0f0      	beq.n	8003c38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	68f9      	ldr	r1, [r7, #12]
 8003c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c84:	4313      	orrs	r3, r2
 8003c86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b087      	sub	sp, #28
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0306 	and.w	r3, r3, #6
 8003cae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	75fb      	strb	r3, [r7, #23]
 8003cba:	e00a      	b.n	8003cd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d002      	beq.n	8003cc8 <USB_GetDevSpeed+0x32>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d102      	bne.n	8003cce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	75fb      	strb	r3, [r7, #23]
 8003ccc:	e001      	b.n	8003cd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003cce:	230f      	movs	r3, #15
 8003cd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	785b      	ldrb	r3, [r3, #1]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d13a      	bne.n	8003d72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	68f9      	ldr	r1, [r7, #12]
 8003d16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d155      	bne.n	8003de0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	791b      	ldrb	r3, [r3, #4]
 8003d4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	059b      	lsls	r3, r3, #22
 8003d56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	0151      	lsls	r1, r2, #5
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	440a      	add	r2, r1
 8003d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	e036      	b.n	8003de0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	2101      	movs	r1, #1
 8003d84:	fa01 f303 	lsl.w	r3, r1, r3
 8003d88:	041b      	lsls	r3, r3, #16
 8003d8a:	68f9      	ldr	r1, [r7, #12]
 8003d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d11a      	bne.n	8003de0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	791b      	ldrb	r3, [r3, #4]
 8003dc4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	0151      	lsls	r1, r2, #5
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	440a      	add	r2, r1
 8003dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dde:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	785b      	ldrb	r3, [r3, #1]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d161      	bne.n	8003ed0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e22:	d11f      	bne.n	8003e64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	0151      	lsls	r1, r2, #5
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	440a      	add	r2, r1
 8003e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	0151      	lsls	r1, r2, #5
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	440a      	add	r2, r1
 8003e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	2101      	movs	r1, #1
 8003e76:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	68f9      	ldr	r1, [r7, #12]
 8003e80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e84:	4013      	ands	r3, r2
 8003e86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	2101      	movs	r1, #1
 8003e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	68f9      	ldr	r1, [r7, #12]
 8003ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	0159      	lsls	r1, r3, #5
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	440b      	add	r3, r1
 8003ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4b35      	ldr	r3, [pc, #212]	; (8003fa0 <USB_DeactivateEndpoint+0x1b0>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
 8003ece:	e060      	b.n	8003f92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee6:	d11f      	bne.n	8003f28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	0151      	lsls	r1, r2, #5
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	440a      	add	r2, r1
 8003efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	2101      	movs	r1, #1
 8003f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	43db      	mvns	r3, r3
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f48:	4013      	ands	r3, r2
 8003f4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	041b      	lsls	r3, r3, #16
 8003f64:	43db      	mvns	r3, r3
 8003f66:	68f9      	ldr	r1, [r7, #12]
 8003f68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	0159      	lsls	r1, r3, #5
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	440b      	add	r3, r1
 8003f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <USB_DeactivateEndpoint+0x1b4>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	ec337800 	.word	0xec337800
 8003fa4:	eff37800 	.word	0xeff37800

08003fa8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	785b      	ldrb	r3, [r3, #1]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	f040 817a 	bne.w	80042be <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d132      	bne.n	8004038 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	0151      	lsls	r1, r2, #5
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	440a      	add	r2, r1
 8003fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ff0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	0151      	lsls	r1, r2, #5
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	440a      	add	r2, r1
 800400c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	0151      	lsls	r1, r2, #5
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	440a      	add	r2, r1
 800402c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004030:	0cdb      	lsrs	r3, r3, #19
 8004032:	04db      	lsls	r3, r3, #19
 8004034:	6113      	str	r3, [r2, #16]
 8004036:	e092      	b.n	800415e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004052:	0cdb      	lsrs	r3, r3, #19
 8004054:	04db      	lsls	r3, r3, #19
 8004056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	0151      	lsls	r1, r2, #5
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	440a      	add	r2, r1
 800406e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004072:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004076:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800407a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d11a      	bne.n	80040b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	d903      	bls.n	8004096 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	0151      	lsls	r1, r2, #5
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	440a      	add	r2, r1
 80040ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040b4:	6113      	str	r3, [r2, #16]
 80040b6:	e01b      	b.n	80040f0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6919      	ldr	r1, [r3, #16]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	440b      	add	r3, r1
 80040d0:	1e59      	subs	r1, r3, #1
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040da:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040dc:	4ba2      	ldr	r3, [pc, #648]	; (8004368 <USB_EPStartXfer+0x3c0>)
 80040de:	400b      	ands	r3, r1
 80040e0:	69b9      	ldr	r1, [r7, #24]
 80040e2:	0148      	lsls	r0, r1, #5
 80040e4:	69f9      	ldr	r1, [r7, #28]
 80040e6:	4401      	add	r1, r0
 80040e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040ec:	4313      	orrs	r3, r2
 80040ee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004106:	69b9      	ldr	r1, [r7, #24]
 8004108:	0148      	lsls	r0, r1, #5
 800410a:	69f9      	ldr	r1, [r7, #28]
 800410c:	4401      	add	r1, r0
 800410e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004112:	4313      	orrs	r3, r2
 8004114:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	791b      	ldrb	r3, [r3, #4]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d11f      	bne.n	800415e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	0151      	lsls	r1, r2, #5
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	440a      	add	r2, r1
 8004134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004138:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800413c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	440a      	add	r2, r1
 8004154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004158:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800415c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d14b      	bne.n	80041fc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004178:	461a      	mov	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	791b      	ldrb	r3, [r3, #4]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d128      	bne.n	80041da <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d110      	bne.n	80041ba <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	0151      	lsls	r1, r2, #5
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	440a      	add	r2, r1
 80041ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	e00f      	b.n	80041da <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	0151      	lsls	r1, r2, #5
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	440a      	add	r2, r1
 80041f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e165      	b.n	80044c8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	0151      	lsls	r1, r2, #5
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	440a      	add	r2, r1
 8004212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004216:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800421a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	791b      	ldrb	r3, [r3, #4]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d015      	beq.n	8004250 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 814d 	beq.w	80044c8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	2101      	movs	r1, #1
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	69f9      	ldr	r1, [r7, #28]
 8004246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800424a:	4313      	orrs	r3, r2
 800424c:	634b      	str	r3, [r1, #52]	; 0x34
 800424e:	e13b      	b.n	80044c8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d110      	bne.n	8004282 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	0151      	lsls	r1, r2, #5
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	440a      	add	r2, r1
 8004276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800427a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	e00f      	b.n	80042a2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	0151      	lsls	r1, r2, #5
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	440a      	add	r2, r1
 8004298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800429c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	68d9      	ldr	r1, [r3, #12]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	781a      	ldrb	r2, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	b298      	uxth	r0, r3
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	4603      	mov	r3, r0
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f9b8 	bl	800462c <USB_WritePacket>
 80042bc:	e104      	b.n	80044c8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	0151      	lsls	r1, r2, #5
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	440a      	add	r2, r1
 80042d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042d8:	0cdb      	lsrs	r3, r3, #19
 80042da:	04db      	lsls	r3, r3, #19
 80042dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	0151      	lsls	r1, r2, #5
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	440a      	add	r2, r1
 80042f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004300:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d131      	bne.n	800436c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004336:	69b9      	ldr	r1, [r7, #24]
 8004338:	0148      	lsls	r0, r1, #5
 800433a:	69f9      	ldr	r1, [r7, #28]
 800433c:	4401      	add	r1, r0
 800433e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004342:	4313      	orrs	r3, r2
 8004344:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	0151      	lsls	r1, r2, #5
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	440a      	add	r2, r1
 800435c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004364:	6113      	str	r3, [r2, #16]
 8004366:	e061      	b.n	800442c <USB_EPStartXfer+0x484>
 8004368:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d123      	bne.n	80043bc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004380:	691a      	ldr	r2, [r3, #16]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800438a:	69b9      	ldr	r1, [r7, #24]
 800438c:	0148      	lsls	r0, r1, #5
 800438e:	69f9      	ldr	r1, [r7, #28]
 8004390:	4401      	add	r1, r0
 8004392:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004396:	4313      	orrs	r3, r2
 8004398:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	0151      	lsls	r1, r2, #5
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	440a      	add	r2, r1
 80043b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043b8:	6113      	str	r3, [r2, #16]
 80043ba:	e037      	b.n	800442c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	4413      	add	r3, r2
 80043c6:	1e5a      	subs	r2, r3, #1
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	8afa      	ldrh	r2, [r7, #22]
 80043d8:	fb03 f202 	mul.w	r2, r3, r2
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	8afb      	ldrh	r3, [r7, #22]
 80043f0:	04d9      	lsls	r1, r3, #19
 80043f2:	4b38      	ldr	r3, [pc, #224]	; (80044d4 <USB_EPStartXfer+0x52c>)
 80043f4:	400b      	ands	r3, r1
 80043f6:	69b9      	ldr	r1, [r7, #24]
 80043f8:	0148      	lsls	r0, r1, #5
 80043fa:	69f9      	ldr	r1, [r7, #28]
 80043fc:	4401      	add	r1, r0
 80043fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004402:	4313      	orrs	r3, r2
 8004404:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800441c:	69b9      	ldr	r1, [r7, #24]
 800441e:	0148      	lsls	r0, r1, #5
 8004420:	69f9      	ldr	r1, [r7, #28]
 8004422:	4401      	add	r1, r0
 8004424:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004428:	4313      	orrs	r3, r2
 800442a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d10d      	bne.n	800444e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	68d9      	ldr	r1, [r3, #12]
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444a:	460a      	mov	r2, r1
 800444c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	791b      	ldrb	r3, [r3, #4]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d128      	bne.n	80044a8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d110      	bne.n	8004488 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	0151      	lsls	r1, r2, #5
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	440a      	add	r2, r1
 800447c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004480:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e00f      	b.n	80044a8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	0151      	lsls	r1, r2, #5
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	440a      	add	r2, r1
 800449e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	0151      	lsls	r1, r2, #5
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	440a      	add	r2, r1
 80044be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3720      	adds	r7, #32
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	1ff80000 	.word	0x1ff80000

080044d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	785b      	ldrb	r3, [r3, #1]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d14a      	bne.n	800458c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800450a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800450e:	f040 8086 	bne.w	800461e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	7812      	ldrb	r2, [r2, #0]
 8004526:	0151      	lsls	r1, r2, #5
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	440a      	add	r2, r1
 800452c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004530:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004534:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	7812      	ldrb	r2, [r2, #0]
 800454a:	0151      	lsls	r1, r2, #5
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	440a      	add	r2, r1
 8004550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004558:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f242 7210 	movw	r2, #10000	; 0x2710
 8004566:	4293      	cmp	r3, r2
 8004568:	d902      	bls.n	8004570 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	75fb      	strb	r3, [r7, #23]
          break;
 800456e:	e056      	b.n	800461e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004588:	d0e7      	beq.n	800455a <USB_EPStopXfer+0x82>
 800458a:	e048      	b.n	800461e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045a4:	d13b      	bne.n	800461e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	0151      	lsls	r1, r2, #5
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	440a      	add	r2, r1
 80045c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	7812      	ldrb	r2, [r2, #0]
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3301      	adds	r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d902      	bls.n	8004604 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	75fb      	strb	r3, [r7, #23]
          break;
 8004602:	e00c      	b.n	800461e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800461c:	d0e7      	beq.n	80045ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800461e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004620:	4618      	mov	r0, r3
 8004622:	371c      	adds	r7, #28
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800462c:	b480      	push	{r7}
 800462e:	b089      	sub	sp, #36	; 0x24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	4611      	mov	r1, r2
 8004638:	461a      	mov	r2, r3
 800463a:	460b      	mov	r3, r1
 800463c:	71fb      	strb	r3, [r7, #7]
 800463e:	4613      	mov	r3, r2
 8004640:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800464a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800464e:	2b00      	cmp	r3, #0
 8004650:	d123      	bne.n	800469a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004652:	88bb      	ldrh	r3, [r7, #4]
 8004654:	3303      	adds	r3, #3
 8004656:	089b      	lsrs	r3, r3, #2
 8004658:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800465a:	2300      	movs	r3, #0
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	e018      	b.n	8004692 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	031a      	lsls	r2, r3, #12
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	4413      	add	r3, r2
 8004668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466c:	461a      	mov	r2, r3
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	3301      	adds	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	3301      	adds	r3, #1
 800467e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	3301      	adds	r3, #1
 8004684:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	3301      	adds	r3, #1
 800468a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	3301      	adds	r3, #1
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	429a      	cmp	r2, r3
 8004698:	d3e2      	bcc.n	8004660 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3724      	adds	r7, #36	; 0x24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b08b      	sub	sp, #44	; 0x2c
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	4613      	mov	r3, r2
 80046b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80046be:	88fb      	ldrh	r3, [r7, #6]
 80046c0:	089b      	lsrs	r3, r3, #2
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	623b      	str	r3, [r7, #32]
 80046d2:	e014      	b.n	80046fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	601a      	str	r2, [r3, #0]
    pDest++;
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	3301      	adds	r3, #1
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	3301      	adds	r3, #1
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	3301      	adds	r3, #1
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	3301      	adds	r3, #1
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	3301      	adds	r3, #1
 80046fc:	623b      	str	r3, [r7, #32]
 80046fe:	6a3a      	ldr	r2, [r7, #32]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	429a      	cmp	r2, r3
 8004704:	d3e6      	bcc.n	80046d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004706:	8bfb      	ldrh	r3, [r7, #30]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01e      	beq.n	800474a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004716:	461a      	mov	r2, r3
 8004718:	f107 0310 	add.w	r3, r7, #16
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
 800472c:	b2da      	uxtb	r2, r3
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	701a      	strb	r2, [r3, #0]
      i++;
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	3301      	adds	r3, #1
 8004736:	623b      	str	r3, [r7, #32]
      pDest++;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	3301      	adds	r3, #1
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800473e:	8bfb      	ldrh	r3, [r7, #30]
 8004740:	3b01      	subs	r3, #1
 8004742:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004744:	8bfb      	ldrh	r3, [r7, #30]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1ea      	bne.n	8004720 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800474c:	4618      	mov	r0, r3
 800474e:	372c      	adds	r7, #44	; 0x2c
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	785b      	ldrb	r3, [r3, #1]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d12c      	bne.n	80047ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	db12      	blt.n	80047ac <USB_EPSetStall+0x54>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00f      	beq.n	80047ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	0151      	lsls	r1, r2, #5
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	440a      	add	r2, r1
 80047a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	0151      	lsls	r1, r2, #5
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	440a      	add	r2, r1
 80047c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	e02b      	b.n	8004826 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	db12      	blt.n	8004806 <USB_EPSetStall+0xae>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00f      	beq.n	8004806 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	0151      	lsls	r1, r2, #5
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	440a      	add	r2, r1
 80047fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004800:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004804:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	0151      	lsls	r1, r2, #5
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	440a      	add	r2, r1
 800481c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004824:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	785b      	ldrb	r3, [r3, #1]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d128      	bne.n	80048a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800486e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	791b      	ldrb	r3, [r3, #4]
 8004874:	2b03      	cmp	r3, #3
 8004876:	d003      	beq.n	8004880 <USB_EPClearStall+0x4c>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	791b      	ldrb	r3, [r3, #4]
 800487c:	2b02      	cmp	r3, #2
 800487e:	d138      	bne.n	80048f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	440a      	add	r2, r1
 8004896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	e027      	b.n	80048f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	0151      	lsls	r1, r2, #5
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	440a      	add	r2, r1
 80048b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	791b      	ldrb	r3, [r3, #4]
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d003      	beq.n	80048d2 <USB_EPClearStall+0x9e>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	791b      	ldrb	r3, [r3, #4]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d10f      	bne.n	80048f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	0151      	lsls	r1, r2, #5
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	440a      	add	r2, r1
 80048e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800491e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004922:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004934:	68f9      	ldr	r1, [r7, #12]
 8004936:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004966:	f023 0303 	bic.w	r3, r3, #3
 800496a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800497a:	f023 0302 	bic.w	r3, r3, #2
 800497e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049a8:	f023 0303 	bic.w	r3, r3, #3
 80049ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049bc:	f043 0302 	orr.w	r3, r3, #2
 80049c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4013      	ands	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049e8:	68fb      	ldr	r3, [r7, #12]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	4013      	ands	r3, r2
 8004a18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	0c1b      	lsrs	r3, r3, #16
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	b29b      	uxth	r3, r3
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b085      	sub	sp, #20
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	460b      	mov	r3, r1
 8004a68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b087      	sub	sp, #28
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aca:	01db      	lsls	r3, r3, #7
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f003 0301 	and.w	r3, r3, #1
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b30:	f023 0307 	bic.w	r3, r3, #7
 8004b34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	460b      	mov	r3, r1
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	333c      	adds	r3, #60	; 0x3c
 8004b6e:	3304      	adds	r3, #4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	4a26      	ldr	r2, [pc, #152]	; (8004c10 <USB_EP0_OutStart+0xb8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d90a      	bls.n	8004b92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b8c:	d101      	bne.n	8004b92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e037      	b.n	8004c02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc0:	f043 0318 	orr.w	r3, r3, #24
 8004bc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004bd8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004bda:	7afb      	ldrb	r3, [r7, #11]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d10f      	bne.n	8004c00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be6:	461a      	mov	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bfa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004bfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	4f54300a 	.word	0x4f54300a

08004c14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3301      	adds	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004c2c:	d901      	bls.n	8004c32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e01b      	b.n	8004c6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	daf2      	bge.n	8004c20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f043 0201 	orr.w	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004c56:	d901      	bls.n	8004c5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e006      	b.n	8004c6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d0f0      	beq.n	8004c4a <USB_CoreReset+0x36>

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004c84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004c88:	f002 fcae 	bl	80075e8 <USBD_static_malloc>
 8004c8c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d109      	bne.n	8004ca8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	32b0      	adds	r2, #176	; 0xb0
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e0d4      	b.n	8004e52 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004ca8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004cac:	2100      	movs	r1, #0
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f002 fcde 	bl	8007670 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	32b0      	adds	r2, #176	; 0xb0
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	32b0      	adds	r2, #176	; 0xb0
 8004cce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	7c1b      	ldrb	r3, [r3, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d138      	bne.n	8004d52 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ce0:	4b5e      	ldr	r3, [pc, #376]	; (8004e5c <USBD_CDC_Init+0x1e4>)
 8004ce2:	7819      	ldrb	r1, [r3, #0]
 8004ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ce8:	2202      	movs	r2, #2
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f002 fb59 	bl	80073a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004cf0:	4b5a      	ldr	r3, [pc, #360]	; (8004e5c <USBD_CDC_Init+0x1e4>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	f003 020f 	and.w	r2, r3, #15
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3324      	adds	r3, #36	; 0x24
 8004d06:	2201      	movs	r2, #1
 8004d08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004d0a:	4b55      	ldr	r3, [pc, #340]	; (8004e60 <USBD_CDC_Init+0x1e8>)
 8004d0c:	7819      	ldrb	r1, [r3, #0]
 8004d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d12:	2202      	movs	r2, #2
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f002 fb44 	bl	80073a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004d1a:	4b51      	ldr	r3, [pc, #324]	; (8004e60 <USBD_CDC_Init+0x1e8>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	f003 020f 	and.w	r2, r3, #15
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004d32:	2201      	movs	r2, #1
 8004d34:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004d36:	4b4b      	ldr	r3, [pc, #300]	; (8004e64 <USBD_CDC_Init+0x1ec>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	f003 020f 	and.w	r2, r3, #15
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	3326      	adds	r3, #38	; 0x26
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	801a      	strh	r2, [r3, #0]
 8004d50:	e035      	b.n	8004dbe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004d52:	4b42      	ldr	r3, [pc, #264]	; (8004e5c <USBD_CDC_Init+0x1e4>)
 8004d54:	7819      	ldrb	r1, [r3, #0]
 8004d56:	2340      	movs	r3, #64	; 0x40
 8004d58:	2202      	movs	r2, #2
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f002 fb21 	bl	80073a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004d60:	4b3e      	ldr	r3, [pc, #248]	; (8004e5c <USBD_CDC_Init+0x1e4>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	f003 020f 	and.w	r2, r3, #15
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	3324      	adds	r3, #36	; 0x24
 8004d76:	2201      	movs	r2, #1
 8004d78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004d7a:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <USBD_CDC_Init+0x1e8>)
 8004d7c:	7819      	ldrb	r1, [r3, #0]
 8004d7e:	2340      	movs	r3, #64	; 0x40
 8004d80:	2202      	movs	r2, #2
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f002 fb0d 	bl	80073a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004d88:	4b35      	ldr	r3, [pc, #212]	; (8004e60 <USBD_CDC_Init+0x1e8>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	f003 020f 	and.w	r2, r3, #15
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004da0:	2201      	movs	r2, #1
 8004da2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004da4:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <USBD_CDC_Init+0x1ec>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f003 020f 	and.w	r2, r3, #15
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	3326      	adds	r3, #38	; 0x26
 8004dba:	2210      	movs	r2, #16
 8004dbc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004dbe:	4b29      	ldr	r3, [pc, #164]	; (8004e64 <USBD_CDC_Init+0x1ec>)
 8004dc0:	7819      	ldrb	r1, [r3, #0]
 8004dc2:	2308      	movs	r3, #8
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f002 faeb 	bl	80073a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004dcc:	4b25      	ldr	r3, [pc, #148]	; (8004e64 <USBD_CDC_Init+0x1ec>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	f003 020f 	and.w	r2, r3, #15
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	3324      	adds	r3, #36	; 0x24
 8004de2:	2201      	movs	r2, #1
 8004de4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	33b0      	adds	r3, #176	; 0xb0
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e018      	b.n	8004e52 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	7c1b      	ldrb	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <USBD_CDC_Init+0x1e8>)
 8004e2a:	7819      	ldrb	r1, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f002 fba2 	bl	8007580 <USBD_LL_PrepareReceive>
 8004e3c:	e008      	b.n	8004e50 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e3e:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <USBD_CDC_Init+0x1e8>)
 8004e40:	7819      	ldrb	r1, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e48:	2340      	movs	r3, #64	; 0x40
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f002 fb98 	bl	8007580 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000093 	.word	0x20000093
 8004e60:	20000094 	.word	0x20000094
 8004e64:	20000095 	.word	0x20000095

08004e68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004e74:	4b3a      	ldr	r3, [pc, #232]	; (8004f60 <USBD_CDC_DeInit+0xf8>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f002 fab7 	bl	80073ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004e80:	4b37      	ldr	r3, [pc, #220]	; (8004f60 <USBD_CDC_DeInit+0xf8>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	f003 020f 	and.w	r2, r3, #15
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	3324      	adds	r3, #36	; 0x24
 8004e96:	2200      	movs	r2, #0
 8004e98:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004e9a:	4b32      	ldr	r3, [pc, #200]	; (8004f64 <USBD_CDC_DeInit+0xfc>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f002 faa4 	bl	80073ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004ea6:	4b2f      	ldr	r3, [pc, #188]	; (8004f64 <USBD_CDC_DeInit+0xfc>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	f003 020f 	and.w	r2, r3, #15
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004ec2:	4b29      	ldr	r3, [pc, #164]	; (8004f68 <USBD_CDC_DeInit+0x100>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f002 fa90 	bl	80073ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004ece:	4b26      	ldr	r3, [pc, #152]	; (8004f68 <USBD_CDC_DeInit+0x100>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	f003 020f 	and.w	r2, r3, #15
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	3324      	adds	r3, #36	; 0x24
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004ee8:	4b1f      	ldr	r3, [pc, #124]	; (8004f68 <USBD_CDC_DeInit+0x100>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	f003 020f 	and.w	r2, r3, #15
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	440b      	add	r3, r1
 8004efc:	3326      	adds	r3, #38	; 0x26
 8004efe:	2200      	movs	r2, #0
 8004f00:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	32b0      	adds	r2, #176	; 0xb0
 8004f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01f      	beq.n	8004f54 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	33b0      	adds	r3, #176	; 0xb0
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	32b0      	adds	r2, #176	; 0xb0
 8004f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f002 fb64 	bl	8007604 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	32b0      	adds	r2, #176	; 0xb0
 8004f46:	2100      	movs	r1, #0
 8004f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20000093 	.word	0x20000093
 8004f64:	20000094 	.word	0x20000094
 8004f68:	20000095 	.word	0x20000095

08004f6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	32b0      	adds	r2, #176	; 0xb0
 8004f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e0bf      	b.n	800511c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d050      	beq.n	800504a <USBD_CDC_Setup+0xde>
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	f040 80af 	bne.w	800510c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	88db      	ldrh	r3, [r3, #6]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d03a      	beq.n	800502c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	b25b      	sxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	da1b      	bge.n	8004ff8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	33b0      	adds	r3, #176	; 0xb0
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004fd6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	88d2      	ldrh	r2, [r2, #6]
 8004fdc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	88db      	ldrh	r3, [r3, #6]
 8004fe2:	2b07      	cmp	r3, #7
 8004fe4:	bf28      	it	cs
 8004fe6:	2307      	movcs	r3, #7
 8004fe8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	89fa      	ldrh	r2, [r7, #14]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f001 fd89 	bl	8006b08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004ff6:	e090      	b.n	800511a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	785a      	ldrb	r2, [r3, #1]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	88db      	ldrh	r3, [r3, #6]
 8005006:	2b3f      	cmp	r3, #63	; 0x3f
 8005008:	d803      	bhi.n	8005012 <USBD_CDC_Setup+0xa6>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	88db      	ldrh	r3, [r3, #6]
 800500e:	b2da      	uxtb	r2, r3
 8005010:	e000      	b.n	8005014 <USBD_CDC_Setup+0xa8>
 8005012:	2240      	movs	r2, #64	; 0x40
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800501a:	6939      	ldr	r1, [r7, #16]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005022:	461a      	mov	r2, r3
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f001 fd9b 	bl	8006b60 <USBD_CtlPrepareRx>
      break;
 800502a:	e076      	b.n	800511a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	33b0      	adds	r3, #176	; 0xb0
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	7850      	ldrb	r0, [r2, #1]
 8005042:	2200      	movs	r2, #0
 8005044:	6839      	ldr	r1, [r7, #0]
 8005046:	4798      	blx	r3
      break;
 8005048:	e067      	b.n	800511a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	785b      	ldrb	r3, [r3, #1]
 800504e:	2b0b      	cmp	r3, #11
 8005050:	d851      	bhi.n	80050f6 <USBD_CDC_Setup+0x18a>
 8005052:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <USBD_CDC_Setup+0xec>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	08005089 	.word	0x08005089
 800505c:	08005105 	.word	0x08005105
 8005060:	080050f7 	.word	0x080050f7
 8005064:	080050f7 	.word	0x080050f7
 8005068:	080050f7 	.word	0x080050f7
 800506c:	080050f7 	.word	0x080050f7
 8005070:	080050f7 	.word	0x080050f7
 8005074:	080050f7 	.word	0x080050f7
 8005078:	080050f7 	.word	0x080050f7
 800507c:	080050f7 	.word	0x080050f7
 8005080:	080050b3 	.word	0x080050b3
 8005084:	080050dd 	.word	0x080050dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b03      	cmp	r3, #3
 8005092:	d107      	bne.n	80050a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005094:	f107 030a 	add.w	r3, r7, #10
 8005098:	2202      	movs	r2, #2
 800509a:	4619      	mov	r1, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f001 fd33 	bl	8006b08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050a2:	e032      	b.n	800510a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80050a4:	6839      	ldr	r1, [r7, #0]
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f001 fcbd 	bl	8006a26 <USBD_CtlError>
            ret = USBD_FAIL;
 80050ac:	2303      	movs	r3, #3
 80050ae:	75fb      	strb	r3, [r7, #23]
          break;
 80050b0:	e02b      	b.n	800510a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d107      	bne.n	80050ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80050be:	f107 030d 	add.w	r3, r7, #13
 80050c2:	2201      	movs	r2, #1
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f001 fd1e 	bl	8006b08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050cc:	e01d      	b.n	800510a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f001 fca8 	bl	8006a26 <USBD_CtlError>
            ret = USBD_FAIL;
 80050d6:	2303      	movs	r3, #3
 80050d8:	75fb      	strb	r3, [r7, #23]
          break;
 80050da:	e016      	b.n	800510a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d00f      	beq.n	8005108 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f001 fc9b 	bl	8006a26 <USBD_CtlError>
            ret = USBD_FAIL;
 80050f0:	2303      	movs	r3, #3
 80050f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80050f4:	e008      	b.n	8005108 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80050f6:	6839      	ldr	r1, [r7, #0]
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f001 fc94 	bl	8006a26 <USBD_CtlError>
          ret = USBD_FAIL;
 80050fe:	2303      	movs	r3, #3
 8005100:	75fb      	strb	r3, [r7, #23]
          break;
 8005102:	e002      	b.n	800510a <USBD_CDC_Setup+0x19e>
          break;
 8005104:	bf00      	nop
 8005106:	e008      	b.n	800511a <USBD_CDC_Setup+0x1ae>
          break;
 8005108:	bf00      	nop
      }
      break;
 800510a:	e006      	b.n	800511a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f001 fc89 	bl	8006a26 <USBD_CtlError>
      ret = USBD_FAIL;
 8005114:	2303      	movs	r3, #3
 8005116:	75fb      	strb	r3, [r7, #23]
      break;
 8005118:	bf00      	nop
  }

  return (uint8_t)ret;
 800511a:	7dfb      	ldrb	r3, [r7, #23]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005136:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	32b0      	adds	r2, #176	; 0xb0
 8005142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800514a:	2303      	movs	r3, #3
 800514c:	e065      	b.n	800521a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	32b0      	adds	r2, #176	; 0xb0
 8005158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	f003 020f 	and.w	r2, r3, #15
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	440b      	add	r3, r1
 8005170:	3318      	adds	r3, #24
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d02f      	beq.n	80051d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005178:	78fb      	ldrb	r3, [r7, #3]
 800517a:	f003 020f 	and.w	r2, r3, #15
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	3318      	adds	r3, #24
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	78fb      	ldrb	r3, [r7, #3]
 8005190:	f003 010f 	and.w	r1, r3, #15
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	460b      	mov	r3, r1
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	440b      	add	r3, r1
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4403      	add	r3, r0
 80051a0:	331c      	adds	r3, #28
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80051a8:	fb01 f303 	mul.w	r3, r1, r3
 80051ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d112      	bne.n	80051d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	f003 020f 	and.w	r2, r3, #15
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	440b      	add	r3, r1
 80051c4:	3318      	adds	r3, #24
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80051ca:	78f9      	ldrb	r1, [r7, #3]
 80051cc:	2300      	movs	r3, #0
 80051ce:	2200      	movs	r2, #0
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f002 f9b4 	bl	800753e <USBD_LL_Transmit>
 80051d6:	e01f      	b.n	8005218 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2200      	movs	r2, #0
 80051dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	33b0      	adds	r3, #176	; 0xb0
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d010      	beq.n	8005218 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	33b0      	adds	r3, #176	; 0xb0
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	460b      	mov	r3, r1
 800522c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	32b0      	adds	r2, #176	; 0xb0
 8005238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800523c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	32b0      	adds	r2, #176	; 0xb0
 8005248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005250:	2303      	movs	r3, #3
 8005252:	e01a      	b.n	800528a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	4619      	mov	r1, r3
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f002 f9b2 	bl	80075c2 <USBD_LL_GetRxDataSize>
 800525e:	4602      	mov	r2, r0
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	33b0      	adds	r3, #176	; 0xb0
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005284:	4611      	mov	r1, r2
 8005286:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	32b0      	adds	r2, #176	; 0xb0
 80052a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e025      	b.n	8005300 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	33b0      	adds	r3, #176	; 0xb0
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01a      	beq.n	80052fe <USBD_CDC_EP0_RxReady+0x6c>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80052ce:	2bff      	cmp	r3, #255	; 0xff
 80052d0:	d015      	beq.n	80052fe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	33b0      	adds	r3, #176	; 0xb0
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80052ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80052f2:	b292      	uxth	r2, r2
 80052f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	22ff      	movs	r2, #255	; 0xff
 80052fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005310:	2182      	movs	r1, #130	; 0x82
 8005312:	4818      	ldr	r0, [pc, #96]	; (8005374 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005314:	f000 fd4f 	bl	8005db6 <USBD_GetEpDesc>
 8005318:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800531a:	2101      	movs	r1, #1
 800531c:	4815      	ldr	r0, [pc, #84]	; (8005374 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800531e:	f000 fd4a 	bl	8005db6 <USBD_GetEpDesc>
 8005322:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005324:	2181      	movs	r1, #129	; 0x81
 8005326:	4813      	ldr	r0, [pc, #76]	; (8005374 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005328:	f000 fd45 	bl	8005db6 <USBD_GetEpDesc>
 800532c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2210      	movs	r2, #16
 8005338:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d006      	beq.n	800534e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2200      	movs	r2, #0
 8005344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005348:	711a      	strb	r2, [r3, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d006      	beq.n	8005362 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800535c:	711a      	strb	r2, [r3, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2243      	movs	r2, #67	; 0x43
 8005366:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005368:	4b02      	ldr	r3, [pc, #8]	; (8005374 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000050 	.word	0x20000050

08005378 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005380:	2182      	movs	r1, #130	; 0x82
 8005382:	4818      	ldr	r0, [pc, #96]	; (80053e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005384:	f000 fd17 	bl	8005db6 <USBD_GetEpDesc>
 8005388:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800538a:	2101      	movs	r1, #1
 800538c:	4815      	ldr	r0, [pc, #84]	; (80053e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800538e:	f000 fd12 	bl	8005db6 <USBD_GetEpDesc>
 8005392:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005394:	2181      	movs	r1, #129	; 0x81
 8005396:	4813      	ldr	r0, [pc, #76]	; (80053e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005398:	f000 fd0d 	bl	8005db6 <USBD_GetEpDesc>
 800539c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2210      	movs	r2, #16
 80053a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d006      	beq.n	80053be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2200      	movs	r2, #0
 80053b4:	711a      	strb	r2, [r3, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f042 0202 	orr.w	r2, r2, #2
 80053bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d006      	beq.n	80053d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	711a      	strb	r2, [r3, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f042 0202 	orr.w	r2, r2, #2
 80053d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2243      	movs	r2, #67	; 0x43
 80053d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80053d8:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000050 	.word	0x20000050

080053e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80053f0:	2182      	movs	r1, #130	; 0x82
 80053f2:	4818      	ldr	r0, [pc, #96]	; (8005454 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80053f4:	f000 fcdf 	bl	8005db6 <USBD_GetEpDesc>
 80053f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80053fa:	2101      	movs	r1, #1
 80053fc:	4815      	ldr	r0, [pc, #84]	; (8005454 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80053fe:	f000 fcda 	bl	8005db6 <USBD_GetEpDesc>
 8005402:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005404:	2181      	movs	r1, #129	; 0x81
 8005406:	4813      	ldr	r0, [pc, #76]	; (8005454 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005408:	f000 fcd5 	bl	8005db6 <USBD_GetEpDesc>
 800540c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2210      	movs	r2, #16
 8005418:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d006      	beq.n	800542e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	2200      	movs	r2, #0
 8005424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005428:	711a      	strb	r2, [r3, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d006      	beq.n	8005442 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800543c:	711a      	strb	r2, [r3, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2243      	movs	r2, #67	; 0x43
 8005446:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005448:	4b02      	ldr	r3, [pc, #8]	; (8005454 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000050 	.word	0x20000050

08005458 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	220a      	movs	r2, #10
 8005464:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005466:	4b03      	ldr	r3, [pc, #12]	; (8005474 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	2000000c 	.word	0x2000000c

08005478 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005488:	2303      	movs	r3, #3
 800548a:	e009      	b.n	80054a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	33b0      	adds	r3, #176	; 0xb0
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	32b0      	adds	r2, #176	; 0xb0
 80054c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e008      	b.n	80054e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	371c      	adds	r7, #28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	32b0      	adds	r2, #176	; 0xb0
 8005504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005508:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005510:	2303      	movs	r3, #3
 8005512:	e004      	b.n	800551e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	32b0      	adds	r2, #176	; 0xb0
 800553e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005542:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800554e:	2303      	movs	r3, #3
 8005550:	e025      	b.n	800559e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005558:	2b00      	cmp	r3, #0
 800555a:	d11f      	bne.n	800559c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2201      	movs	r2, #1
 8005560:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005564:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <USBD_CDC_TransmitPacket+0x7c>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	f003 020f 	and.w	r2, r3, #15
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4403      	add	r3, r0
 800557e:	3318      	adds	r3, #24
 8005580:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005582:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <USBD_CDC_TransmitPacket+0x7c>)
 8005584:	7819      	ldrb	r1, [r3, #0]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f001 ffd3 	bl	800753e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800559c:	7bfb      	ldrb	r3, [r7, #15]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000093 	.word	0x20000093

080055ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	32b0      	adds	r2, #176	; 0xb0
 80055be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	32b0      	adds	r2, #176	; 0xb0
 80055ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e018      	b.n	800560c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	7c1b      	ldrb	r3, [r3, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <USBD_CDC_ReceivePacket+0x68>)
 80055e4:	7819      	ldrb	r1, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f001 ffc5 	bl	8007580 <USBD_LL_PrepareReceive>
 80055f6:	e008      	b.n	800560a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80055f8:	4b06      	ldr	r3, [pc, #24]	; (8005614 <USBD_CDC_ReceivePacket+0x68>)
 80055fa:	7819      	ldrb	r1, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005602:	2340      	movs	r3, #64	; 0x40
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f001 ffbb 	bl	8007580 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20000094 	.word	0x20000094

08005618 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	4613      	mov	r3, r2
 8005624:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800562c:	2303      	movs	r3, #3
 800562e:	e01f      	b.n	8005670 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	79fa      	ldrb	r2, [r7, #7]
 8005662:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f001 fe35 	bl	80072d4 <USBD_LL_Init>
 800566a:	4603      	mov	r3, r0
 800566c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800566e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800568c:	2303      	movs	r3, #3
 800568e:	e025      	b.n	80056dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	32ae      	adds	r2, #174	; 0xae
 80056a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00f      	beq.n	80056cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	32ae      	adds	r2, #174	; 0xae
 80056b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	f107 020e 	add.w	r2, r7, #14
 80056c0:	4610      	mov	r0, r2
 80056c2:	4798      	blx	r3
 80056c4:	4602      	mov	r2, r0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 fe3d 	bl	800736c <USBD_LL_Start>
 80056f2:	4603      	mov	r3, r0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005704:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005706:	4618      	mov	r0, r3
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	460b      	mov	r3, r1
 800571c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d009      	beq.n	8005740 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	78fa      	ldrb	r2, [r7, #3]
 8005736:	4611      	mov	r1, r2
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	4798      	blx	r3
 800573c:	4603      	mov	r3, r0
 800573e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	460b      	mov	r3, r1
 8005754:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	78fa      	ldrb	r2, [r7, #3]
 8005764:	4611      	mov	r1, r2
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	4798      	blx	r3
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005770:	2303      	movs	r3, #3
 8005772:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005774:	7bfb      	ldrb	r3, [r7, #15]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800578e:	6839      	ldr	r1, [r7, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f001 f90e 	bl	80069b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80057a4:	461a      	mov	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d01a      	beq.n	80057f0 <USBD_LL_SetupStage+0x72>
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d822      	bhi.n	8005804 <USBD_LL_SetupStage+0x86>
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <USBD_LL_SetupStage+0x4a>
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d00a      	beq.n	80057dc <USBD_LL_SetupStage+0x5e>
 80057c6:	e01d      	b.n	8005804 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fb65 	bl	8005ea0 <USBD_StdDevReq>
 80057d6:	4603      	mov	r3, r0
 80057d8:	73fb      	strb	r3, [r7, #15]
      break;
 80057da:	e020      	b.n	800581e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fbcd 	bl	8005f84 <USBD_StdItfReq>
 80057ea:	4603      	mov	r3, r0
 80057ec:	73fb      	strb	r3, [r7, #15]
      break;
 80057ee:	e016      	b.n	800581e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fc2f 	bl	800605c <USBD_StdEPReq>
 80057fe:	4603      	mov	r3, r0
 8005800:	73fb      	strb	r3, [r7, #15]
      break;
 8005802:	e00c      	b.n	800581e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800580a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800580e:	b2db      	uxtb	r3, r3
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f001 fe0a 	bl	800742c <USBD_LL_StallEP>
 8005818:	4603      	mov	r3, r0
 800581a:	73fb      	strb	r3, [r7, #15]
      break;
 800581c:	bf00      	nop
  }

  return ret;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	460b      	mov	r3, r1
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800583a:	7afb      	ldrb	r3, [r7, #11]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d16e      	bne.n	800591e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005846:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800584e:	2b03      	cmp	r3, #3
 8005850:	f040 8098 	bne.w	8005984 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	429a      	cmp	r2, r3
 800585e:	d913      	bls.n	8005888 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	1ad2      	subs	r2, r2, r3
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	4293      	cmp	r3, r2
 8005878:	bf28      	it	cs
 800587a:	4613      	movcs	r3, r2
 800587c:	461a      	mov	r2, r3
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f001 f98a 	bl	8006b9a <USBD_CtlContinueRx>
 8005886:	e07d      	b.n	8005984 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	2b02      	cmp	r3, #2
 8005894:	d014      	beq.n	80058c0 <USBD_LL_DataOutStage+0x98>
 8005896:	2b02      	cmp	r3, #2
 8005898:	d81d      	bhi.n	80058d6 <USBD_LL_DataOutStage+0xae>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <USBD_LL_DataOutStage+0x7c>
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d003      	beq.n	80058aa <USBD_LL_DataOutStage+0x82>
 80058a2:	e018      	b.n	80058d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	75bb      	strb	r3, [r7, #22]
            break;
 80058a8:	e018      	b.n	80058dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	4619      	mov	r1, r3
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fa64 	bl	8005d82 <USBD_CoreFindIF>
 80058ba:	4603      	mov	r3, r0
 80058bc:	75bb      	strb	r3, [r7, #22]
            break;
 80058be:	e00d      	b.n	80058dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	4619      	mov	r1, r3
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fa66 	bl	8005d9c <USBD_CoreFindEP>
 80058d0:	4603      	mov	r3, r0
 80058d2:	75bb      	strb	r3, [r7, #22]
            break;
 80058d4:	e002      	b.n	80058dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	75bb      	strb	r3, [r7, #22]
            break;
 80058da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80058dc:	7dbb      	ldrb	r3, [r7, #22]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d119      	bne.n	8005916 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d113      	bne.n	8005916 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80058ee:	7dba      	ldrb	r2, [r7, #22]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	32ae      	adds	r2, #174	; 0xae
 80058f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00b      	beq.n	8005916 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80058fe:	7dba      	ldrb	r2, [r7, #22]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005906:	7dba      	ldrb	r2, [r7, #22]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	32ae      	adds	r2, #174	; 0xae
 800590c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f001 f950 	bl	8006bbc <USBD_CtlSendStatus>
 800591c:	e032      	b.n	8005984 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800591e:	7afb      	ldrb	r3, [r7, #11]
 8005920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005924:	b2db      	uxtb	r3, r3
 8005926:	4619      	mov	r1, r3
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 fa37 	bl	8005d9c <USBD_CoreFindEP>
 800592e:	4603      	mov	r3, r0
 8005930:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005932:	7dbb      	ldrb	r3, [r7, #22]
 8005934:	2bff      	cmp	r3, #255	; 0xff
 8005936:	d025      	beq.n	8005984 <USBD_LL_DataOutStage+0x15c>
 8005938:	7dbb      	ldrb	r3, [r7, #22]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d122      	bne.n	8005984 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b03      	cmp	r3, #3
 8005948:	d117      	bne.n	800597a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800594a:	7dba      	ldrb	r2, [r7, #22]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	32ae      	adds	r2, #174	; 0xae
 8005950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00f      	beq.n	800597a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800595a:	7dba      	ldrb	r2, [r7, #22]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005962:	7dba      	ldrb	r2, [r7, #22]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	32ae      	adds	r2, #174	; 0xae
 8005968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	7afa      	ldrb	r2, [r7, #11]
 8005970:	4611      	mov	r1, r2
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	4798      	blx	r3
 8005976:	4603      	mov	r3, r0
 8005978:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800597a:	7dfb      	ldrb	r3, [r7, #23]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	e000      	b.n	8005986 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b086      	sub	sp, #24
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	460b      	mov	r3, r1
 8005998:	607a      	str	r2, [r7, #4]
 800599a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800599c:	7afb      	ldrb	r3, [r7, #11]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d16f      	bne.n	8005a82 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3314      	adds	r3, #20
 80059a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d15a      	bne.n	8005a68 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d914      	bls.n	80059e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	1ad2      	subs	r2, r2, r3
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	461a      	mov	r2, r3
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f001 f8b2 	bl	8006b3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059da:	2300      	movs	r3, #0
 80059dc:	2200      	movs	r2, #0
 80059de:	2100      	movs	r1, #0
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f001 fdcd 	bl	8007580 <USBD_LL_PrepareReceive>
 80059e6:	e03f      	b.n	8005a68 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d11c      	bne.n	8005a2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d316      	bcc.n	8005a2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d20f      	bcs.n	8005a2e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2100      	movs	r1, #0
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f001 f893 	bl	8006b3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a20:	2300      	movs	r3, #0
 8005a22:	2200      	movs	r2, #0
 8005a24:	2100      	movs	r1, #0
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f001 fdaa 	bl	8007580 <USBD_LL_PrepareReceive>
 8005a2c:	e01c      	b.n	8005a68 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d10f      	bne.n	8005a5a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a5a:	2180      	movs	r1, #128	; 0x80
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f001 fce5 	bl	800742c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f001 f8bd 	bl	8006be2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d03a      	beq.n	8005ae8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f7ff fe42 	bl	80056fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005a80:	e032      	b.n	8005ae8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005a82:	7afb      	ldrb	r3, [r7, #11]
 8005a84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 f985 	bl	8005d9c <USBD_CoreFindEP>
 8005a92:	4603      	mov	r3, r0
 8005a94:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
 8005a98:	2bff      	cmp	r3, #255	; 0xff
 8005a9a:	d025      	beq.n	8005ae8 <USBD_LL_DataInStage+0x15a>
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d122      	bne.n	8005ae8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d11c      	bne.n	8005ae8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005aae:	7dfa      	ldrb	r2, [r7, #23]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	32ae      	adds	r2, #174	; 0xae
 8005ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d014      	beq.n	8005ae8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005abe:	7dfa      	ldrb	r2, [r7, #23]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005ac6:	7dfa      	ldrb	r2, [r7, #23]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	32ae      	adds	r2, #174	; 0xae
 8005acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	7afa      	ldrb	r2, [r7, #11]
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	4798      	blx	r3
 8005ada:	4603      	mov	r3, r0
 8005adc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005ade:	7dbb      	ldrb	r3, [r7, #22]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ae4:	7dbb      	ldrb	r3, [r7, #22]
 8005ae6:	e000      	b.n	8005aea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d014      	beq.n	8005b58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00e      	beq.n	8005b58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6852      	ldr	r2, [r2, #4]
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	4611      	mov	r1, r2
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	4798      	blx	r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005b54:	2303      	movs	r3, #3
 8005b56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b58:	2340      	movs	r3, #64	; 0x40
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f001 fc1f 	bl	80073a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2240      	movs	r2, #64	; 0x40
 8005b70:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b74:	2340      	movs	r3, #64	; 0x40
 8005b76:	2200      	movs	r2, #0
 8005b78:	2180      	movs	r1, #128	; 0x80
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 fc11 	bl	80073a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2240      	movs	r2, #64	; 0x40
 8005b8a:	621a      	str	r2, [r3, #32]

  return ret;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	78fa      	ldrb	r2, [r7, #3]
 8005ba6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d006      	beq.n	8005bd8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2204      	movs	r2, #4
 8005bdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d106      	bne.n	8005c10 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d110      	bne.n	8005c54 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00b      	beq.n	8005c54 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b082      	sub	sp, #8
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	460b      	mov	r3, r1
 8005c68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	32ae      	adds	r2, #174	; 0xae
 8005c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e01c      	b.n	8005cba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d115      	bne.n	8005cb8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	32ae      	adds	r2, #174	; 0xae
 8005c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00b      	beq.n	8005cb8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	32ae      	adds	r2, #174	; 0xae
 8005caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	78fa      	ldrb	r2, [r7, #3]
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	32ae      	adds	r2, #174	; 0xae
 8005cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e01c      	b.n	8005d1e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d115      	bne.n	8005d1c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	32ae      	adds	r2, #174	; 0xae
 8005cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00b      	beq.n	8005d1c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	32ae      	adds	r2, #174	; 0xae
 8005d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	78fa      	ldrb	r2, [r7, #3]
 8005d16:	4611      	mov	r1, r2
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00e      	beq.n	8005d78 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6852      	ldr	r2, [r2, #4]
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	4611      	mov	r1, r2
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	4798      	blx	r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005d74:	2303      	movs	r3, #3
 8005d76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d8e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005da8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b086      	sub	sp, #24
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	885b      	ldrh	r3, [r3, #2]
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d920      	bls.n	8005e20 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005de6:	e013      	b.n	8005e10 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005de8:	f107 030a 	add.w	r3, r7, #10
 8005dec:	4619      	mov	r1, r3
 8005dee:	6978      	ldr	r0, [r7, #20]
 8005df0:	f000 f81b 	bl	8005e2a <USBD_GetNextDesc>
 8005df4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d108      	bne.n	8005e10 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	789b      	ldrb	r3, [r3, #2]
 8005e06:	78fa      	ldrb	r2, [r7, #3]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d008      	beq.n	8005e1e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	885b      	ldrh	r3, [r3, #2]
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	897b      	ldrh	r3, [r7, #10]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d8e5      	bhi.n	8005de8 <USBD_GetEpDesc+0x32>
 8005e1c:	e000      	b.n	8005e20 <USBD_GetEpDesc+0x6a>
          break;
 8005e1e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005e20:	693b      	ldr	r3, [r7, #16]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	881a      	ldrh	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	4413      	add	r3, r2
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4413      	add	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005e56:	68fb      	ldr	r3, [r7, #12]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e82:	8a3b      	ldrh	r3, [r7, #16]
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	b21a      	sxth	r2, r3
 8005e88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	b21b      	sxth	r3, r3
 8005e90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005e92:	89fb      	ldrh	r3, [r7, #14]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005eb6:	2b40      	cmp	r3, #64	; 0x40
 8005eb8:	d005      	beq.n	8005ec6 <USBD_StdDevReq+0x26>
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d857      	bhi.n	8005f6e <USBD_StdDevReq+0xce>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00f      	beq.n	8005ee2 <USBD_StdDevReq+0x42>
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d153      	bne.n	8005f6e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	32ae      	adds	r2, #174	; 0xae
 8005ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	4798      	blx	r3
 8005edc:	4603      	mov	r3, r0
 8005ede:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee0:	e04a      	b.n	8005f78 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	785b      	ldrb	r3, [r3, #1]
 8005ee6:	2b09      	cmp	r3, #9
 8005ee8:	d83b      	bhi.n	8005f62 <USBD_StdDevReq+0xc2>
 8005eea:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <USBD_StdDevReq+0x50>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f45 	.word	0x08005f45
 8005ef4:	08005f59 	.word	0x08005f59
 8005ef8:	08005f63 	.word	0x08005f63
 8005efc:	08005f4f 	.word	0x08005f4f
 8005f00:	08005f63 	.word	0x08005f63
 8005f04:	08005f23 	.word	0x08005f23
 8005f08:	08005f19 	.word	0x08005f19
 8005f0c:	08005f63 	.word	0x08005f63
 8005f10:	08005f3b 	.word	0x08005f3b
 8005f14:	08005f2d 	.word	0x08005f2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fa3c 	bl	8006398 <USBD_GetDescriptor>
          break;
 8005f20:	e024      	b.n	8005f6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fba1 	bl	800666c <USBD_SetAddress>
          break;
 8005f2a:	e01f      	b.n	8005f6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fbe0 	bl	80066f4 <USBD_SetConfig>
 8005f34:	4603      	mov	r3, r0
 8005f36:	73fb      	strb	r3, [r7, #15]
          break;
 8005f38:	e018      	b.n	8005f6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fc83 	bl	8006848 <USBD_GetConfig>
          break;
 8005f42:	e013      	b.n	8005f6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005f44:	6839      	ldr	r1, [r7, #0]
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fcb4 	bl	80068b4 <USBD_GetStatus>
          break;
 8005f4c:	e00e      	b.n	8005f6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fce3 	bl	800691c <USBD_SetFeature>
          break;
 8005f56:	e009      	b.n	8005f6c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fd07 	bl	800696e <USBD_ClrFeature>
          break;
 8005f60:	e004      	b.n	8005f6c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fd5e 	bl	8006a26 <USBD_CtlError>
          break;
 8005f6a:	bf00      	nop
      }
      break;
 8005f6c:	e004      	b.n	8005f78 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fd58 	bl	8006a26 <USBD_CtlError>
      break;
 8005f76:	bf00      	nop
  }

  return ret;
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop

08005f84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f9a:	2b40      	cmp	r3, #64	; 0x40
 8005f9c:	d005      	beq.n	8005faa <USBD_StdItfReq+0x26>
 8005f9e:	2b40      	cmp	r3, #64	; 0x40
 8005fa0:	d852      	bhi.n	8006048 <USBD_StdItfReq+0xc4>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <USBD_StdItfReq+0x26>
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	d14e      	bne.n	8006048 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d840      	bhi.n	800603a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	889b      	ldrh	r3, [r3, #4]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d836      	bhi.n	8006030 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	889b      	ldrh	r3, [r3, #4]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff fed9 	bl	8005d82 <USBD_CoreFindIF>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	2bff      	cmp	r3, #255	; 0xff
 8005fd8:	d01d      	beq.n	8006016 <USBD_StdItfReq+0x92>
 8005fda:	7bbb      	ldrb	r3, [r7, #14]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d11a      	bne.n	8006016 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005fe0:	7bba      	ldrb	r2, [r7, #14]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	32ae      	adds	r2, #174	; 0xae
 8005fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00f      	beq.n	8006010 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005ff0:	7bba      	ldrb	r2, [r7, #14]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ff8:	7bba      	ldrb	r2, [r7, #14]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	32ae      	adds	r2, #174	; 0xae
 8005ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
 800600a:	4603      	mov	r3, r0
 800600c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800600e:	e004      	b.n	800601a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006010:	2303      	movs	r3, #3
 8006012:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006014:	e001      	b.n	800601a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006016:	2303      	movs	r3, #3
 8006018:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	88db      	ldrh	r3, [r3, #6]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d110      	bne.n	8006044 <USBD_StdItfReq+0xc0>
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10d      	bne.n	8006044 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fdc7 	bl	8006bbc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800602e:	e009      	b.n	8006044 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fcf7 	bl	8006a26 <USBD_CtlError>
          break;
 8006038:	e004      	b.n	8006044 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800603a:	6839      	ldr	r1, [r7, #0]
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fcf2 	bl	8006a26 <USBD_CtlError>
          break;
 8006042:	e000      	b.n	8006046 <USBD_StdItfReq+0xc2>
          break;
 8006044:	bf00      	nop
      }
      break;
 8006046:	e004      	b.n	8006052 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fceb 	bl	8006a26 <USBD_CtlError>
      break;
 8006050:	bf00      	nop
  }

  return ret;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	889b      	ldrh	r3, [r3, #4]
 800606e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006078:	2b40      	cmp	r3, #64	; 0x40
 800607a:	d007      	beq.n	800608c <USBD_StdEPReq+0x30>
 800607c:	2b40      	cmp	r3, #64	; 0x40
 800607e:	f200 817f 	bhi.w	8006380 <USBD_StdEPReq+0x324>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d02a      	beq.n	80060dc <USBD_StdEPReq+0x80>
 8006086:	2b20      	cmp	r3, #32
 8006088:	f040 817a 	bne.w	8006380 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800608c:	7bbb      	ldrb	r3, [r7, #14]
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff fe83 	bl	8005d9c <USBD_CoreFindEP>
 8006096:	4603      	mov	r3, r0
 8006098:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800609a:	7b7b      	ldrb	r3, [r7, #13]
 800609c:	2bff      	cmp	r3, #255	; 0xff
 800609e:	f000 8174 	beq.w	800638a <USBD_StdEPReq+0x32e>
 80060a2:	7b7b      	ldrb	r3, [r7, #13]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f040 8170 	bne.w	800638a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80060aa:	7b7a      	ldrb	r2, [r7, #13]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80060b2:	7b7a      	ldrb	r2, [r7, #13]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	32ae      	adds	r2, #174	; 0xae
 80060b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 8163 	beq.w	800638a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80060c4:	7b7a      	ldrb	r2, [r7, #13]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	32ae      	adds	r2, #174	; 0xae
 80060ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	4798      	blx	r3
 80060d6:	4603      	mov	r3, r0
 80060d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060da:	e156      	b.n	800638a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	785b      	ldrb	r3, [r3, #1]
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d008      	beq.n	80060f6 <USBD_StdEPReq+0x9a>
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	f300 8145 	bgt.w	8006374 <USBD_StdEPReq+0x318>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 809b 	beq.w	8006226 <USBD_StdEPReq+0x1ca>
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d03c      	beq.n	800616e <USBD_StdEPReq+0x112>
 80060f4:	e13e      	b.n	8006374 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d002      	beq.n	8006108 <USBD_StdEPReq+0xac>
 8006102:	2b03      	cmp	r3, #3
 8006104:	d016      	beq.n	8006134 <USBD_StdEPReq+0xd8>
 8006106:	e02c      	b.n	8006162 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006108:	7bbb      	ldrb	r3, [r7, #14]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00d      	beq.n	800612a <USBD_StdEPReq+0xce>
 800610e:	7bbb      	ldrb	r3, [r7, #14]
 8006110:	2b80      	cmp	r3, #128	; 0x80
 8006112:	d00a      	beq.n	800612a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006114:	7bbb      	ldrb	r3, [r7, #14]
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 f987 	bl	800742c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800611e:	2180      	movs	r1, #128	; 0x80
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f001 f983 	bl	800742c <USBD_LL_StallEP>
 8006126:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006128:	e020      	b.n	800616c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fc7a 	bl	8006a26 <USBD_CtlError>
              break;
 8006132:	e01b      	b.n	800616c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	885b      	ldrh	r3, [r3, #2]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10e      	bne.n	800615a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800613c:	7bbb      	ldrb	r3, [r7, #14]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00b      	beq.n	800615a <USBD_StdEPReq+0xfe>
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	2b80      	cmp	r3, #128	; 0x80
 8006146:	d008      	beq.n	800615a <USBD_StdEPReq+0xfe>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	88db      	ldrh	r3, [r3, #6]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d104      	bne.n	800615a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006150:	7bbb      	ldrb	r3, [r7, #14]
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f001 f969 	bl	800742c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fd2e 	bl	8006bbc <USBD_CtlSendStatus>

              break;
 8006160:	e004      	b.n	800616c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fc5e 	bl	8006a26 <USBD_CtlError>
              break;
 800616a:	bf00      	nop
          }
          break;
 800616c:	e107      	b.n	800637e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d002      	beq.n	8006180 <USBD_StdEPReq+0x124>
 800617a:	2b03      	cmp	r3, #3
 800617c:	d016      	beq.n	80061ac <USBD_StdEPReq+0x150>
 800617e:	e04b      	b.n	8006218 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006180:	7bbb      	ldrb	r3, [r7, #14]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00d      	beq.n	80061a2 <USBD_StdEPReq+0x146>
 8006186:	7bbb      	ldrb	r3, [r7, #14]
 8006188:	2b80      	cmp	r3, #128	; 0x80
 800618a:	d00a      	beq.n	80061a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800618c:	7bbb      	ldrb	r3, [r7, #14]
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f001 f94b 	bl	800742c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006196:	2180      	movs	r1, #128	; 0x80
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 f947 	bl	800742c <USBD_LL_StallEP>
 800619e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061a0:	e040      	b.n	8006224 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fc3e 	bl	8006a26 <USBD_CtlError>
              break;
 80061aa:	e03b      	b.n	8006224 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	885b      	ldrh	r3, [r3, #2]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d136      	bne.n	8006222 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80061b4:	7bbb      	ldrb	r3, [r7, #14]
 80061b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d004      	beq.n	80061c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 f951 	bl	800746a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fcf7 	bl	8006bbc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80061ce:	7bbb      	ldrb	r3, [r7, #14]
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff fde2 	bl	8005d9c <USBD_CoreFindEP>
 80061d8:	4603      	mov	r3, r0
 80061da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061dc:	7b7b      	ldrb	r3, [r7, #13]
 80061de:	2bff      	cmp	r3, #255	; 0xff
 80061e0:	d01f      	beq.n	8006222 <USBD_StdEPReq+0x1c6>
 80061e2:	7b7b      	ldrb	r3, [r7, #13]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d11c      	bne.n	8006222 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80061e8:	7b7a      	ldrb	r2, [r7, #13]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80061f0:	7b7a      	ldrb	r2, [r7, #13]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	32ae      	adds	r2, #174	; 0xae
 80061f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d010      	beq.n	8006222 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006200:	7b7a      	ldrb	r2, [r7, #13]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	32ae      	adds	r2, #174	; 0xae
 8006206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	4798      	blx	r3
 8006212:	4603      	mov	r3, r0
 8006214:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006216:	e004      	b.n	8006222 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fc03 	bl	8006a26 <USBD_CtlError>
              break;
 8006220:	e000      	b.n	8006224 <USBD_StdEPReq+0x1c8>
              break;
 8006222:	bf00      	nop
          }
          break;
 8006224:	e0ab      	b.n	800637e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d002      	beq.n	8006238 <USBD_StdEPReq+0x1dc>
 8006232:	2b03      	cmp	r3, #3
 8006234:	d032      	beq.n	800629c <USBD_StdEPReq+0x240>
 8006236:	e097      	b.n	8006368 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006238:	7bbb      	ldrb	r3, [r7, #14]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <USBD_StdEPReq+0x1f2>
 800623e:	7bbb      	ldrb	r3, [r7, #14]
 8006240:	2b80      	cmp	r3, #128	; 0x80
 8006242:	d004      	beq.n	800624e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fbed 	bl	8006a26 <USBD_CtlError>
                break;
 800624c:	e091      	b.n	8006372 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800624e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006252:	2b00      	cmp	r3, #0
 8006254:	da0b      	bge.n	800626e <USBD_StdEPReq+0x212>
 8006256:	7bbb      	ldrb	r3, [r7, #14]
 8006258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	3310      	adds	r3, #16
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	4413      	add	r3, r2
 800626a:	3304      	adds	r3, #4
 800626c:	e00b      	b.n	8006286 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800626e:	7bbb      	ldrb	r3, [r7, #14]
 8006270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	4413      	add	r3, r2
 8006284:	3304      	adds	r3, #4
 8006286:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2202      	movs	r2, #2
 8006292:	4619      	mov	r1, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fc37 	bl	8006b08 <USBD_CtlSendData>
              break;
 800629a:	e06a      	b.n	8006372 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800629c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	da11      	bge.n	80062c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80062a4:	7bbb      	ldrb	r3, [r7, #14]
 80062a6:	f003 020f 	and.w	r2, r3, #15
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	4613      	mov	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	3324      	adds	r3, #36	; 0x24
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d117      	bne.n	80062ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fbb0 	bl	8006a26 <USBD_CtlError>
                  break;
 80062c6:	e054      	b.n	8006372 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80062c8:	7bbb      	ldrb	r3, [r7, #14]
 80062ca:	f003 020f 	and.w	r2, r3, #15
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fb9d 	bl	8006a26 <USBD_CtlError>
                  break;
 80062ec:	e041      	b.n	8006372 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da0b      	bge.n	800630e <USBD_StdEPReq+0x2b2>
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	3310      	adds	r3, #16
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4413      	add	r3, r2
 800630a:	3304      	adds	r3, #4
 800630c:	e00b      	b.n	8006326 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800630e:	7bbb      	ldrb	r3, [r7, #14]
 8006310:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006314:	4613      	mov	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	4413      	add	r3, r2
 8006324:	3304      	adds	r3, #4
 8006326:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <USBD_StdEPReq+0x2d8>
 800632e:	7bbb      	ldrb	r3, [r7, #14]
 8006330:	2b80      	cmp	r3, #128	; 0x80
 8006332:	d103      	bne.n	800633c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e00e      	b.n	800635a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 f8b1 	bl	80074a8 <USBD_LL_IsStallEP>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2201      	movs	r2, #1
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	e002      	b.n	800635a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2200      	movs	r2, #0
 8006358:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2202      	movs	r2, #2
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fbd1 	bl	8006b08 <USBD_CtlSendData>
              break;
 8006366:	e004      	b.n	8006372 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fb5b 	bl	8006a26 <USBD_CtlError>
              break;
 8006370:	bf00      	nop
          }
          break;
 8006372:	e004      	b.n	800637e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006374:	6839      	ldr	r1, [r7, #0]
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fb55 	bl	8006a26 <USBD_CtlError>
          break;
 800637c:	bf00      	nop
      }
      break;
 800637e:	e005      	b.n	800638c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fb4f 	bl	8006a26 <USBD_CtlError>
      break;
 8006388:	e000      	b.n	800638c <USBD_StdEPReq+0x330>
      break;
 800638a:	bf00      	nop
  }

  return ret;
 800638c:	7bfb      	ldrb	r3, [r7, #15]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	885b      	ldrh	r3, [r3, #2]
 80063b2:	0a1b      	lsrs	r3, r3, #8
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	2b06      	cmp	r3, #6
 80063ba:	f200 8128 	bhi.w	800660e <USBD_GetDescriptor+0x276>
 80063be:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <USBD_GetDescriptor+0x2c>)
 80063c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c4:	080063e1 	.word	0x080063e1
 80063c8:	080063f9 	.word	0x080063f9
 80063cc:	08006439 	.word	0x08006439
 80063d0:	0800660f 	.word	0x0800660f
 80063d4:	0800660f 	.word	0x0800660f
 80063d8:	080065af 	.word	0x080065af
 80063dc:	080065db 	.word	0x080065db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	7c12      	ldrb	r2, [r2, #16]
 80063ec:	f107 0108 	add.w	r1, r7, #8
 80063f0:	4610      	mov	r0, r2
 80063f2:	4798      	blx	r3
 80063f4:	60f8      	str	r0, [r7, #12]
      break;
 80063f6:	e112      	b.n	800661e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	7c1b      	ldrb	r3, [r3, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10d      	bne.n	800641c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006408:	f107 0208 	add.w	r2, r7, #8
 800640c:	4610      	mov	r0, r2
 800640e:	4798      	blx	r3
 8006410:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3301      	adds	r3, #1
 8006416:	2202      	movs	r2, #2
 8006418:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800641a:	e100      	b.n	800661e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	f107 0208 	add.w	r2, r7, #8
 8006428:	4610      	mov	r0, r2
 800642a:	4798      	blx	r3
 800642c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3301      	adds	r3, #1
 8006432:	2202      	movs	r2, #2
 8006434:	701a      	strb	r2, [r3, #0]
      break;
 8006436:	e0f2      	b.n	800661e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	885b      	ldrh	r3, [r3, #2]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b05      	cmp	r3, #5
 8006440:	f200 80ac 	bhi.w	800659c <USBD_GetDescriptor+0x204>
 8006444:	a201      	add	r2, pc, #4	; (adr r2, 800644c <USBD_GetDescriptor+0xb4>)
 8006446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644a:	bf00      	nop
 800644c:	08006465 	.word	0x08006465
 8006450:	08006499 	.word	0x08006499
 8006454:	080064cd 	.word	0x080064cd
 8006458:	08006501 	.word	0x08006501
 800645c:	08006535 	.word	0x08006535
 8006460:	08006569 	.word	0x08006569
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	7c12      	ldrb	r2, [r2, #16]
 800647c:	f107 0108 	add.w	r1, r7, #8
 8006480:	4610      	mov	r0, r2
 8006482:	4798      	blx	r3
 8006484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006486:	e091      	b.n	80065ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 facb 	bl	8006a26 <USBD_CtlError>
            err++;
 8006490:	7afb      	ldrb	r3, [r7, #11]
 8006492:	3301      	adds	r3, #1
 8006494:	72fb      	strb	r3, [r7, #11]
          break;
 8006496:	e089      	b.n	80065ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00b      	beq.n	80064bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	7c12      	ldrb	r2, [r2, #16]
 80064b0:	f107 0108 	add.w	r1, r7, #8
 80064b4:	4610      	mov	r0, r2
 80064b6:	4798      	blx	r3
 80064b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ba:	e077      	b.n	80065ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fab1 	bl	8006a26 <USBD_CtlError>
            err++;
 80064c4:	7afb      	ldrb	r3, [r7, #11]
 80064c6:	3301      	adds	r3, #1
 80064c8:	72fb      	strb	r3, [r7, #11]
          break;
 80064ca:	e06f      	b.n	80065ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	7c12      	ldrb	r2, [r2, #16]
 80064e4:	f107 0108 	add.w	r1, r7, #8
 80064e8:	4610      	mov	r0, r2
 80064ea:	4798      	blx	r3
 80064ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ee:	e05d      	b.n	80065ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa97 	bl	8006a26 <USBD_CtlError>
            err++;
 80064f8:	7afb      	ldrb	r3, [r7, #11]
 80064fa:	3301      	adds	r3, #1
 80064fc:	72fb      	strb	r3, [r7, #11]
          break;
 80064fe:	e055      	b.n	80065ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00b      	beq.n	8006524 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	7c12      	ldrb	r2, [r2, #16]
 8006518:	f107 0108 	add.w	r1, r7, #8
 800651c:	4610      	mov	r0, r2
 800651e:	4798      	blx	r3
 8006520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006522:	e043      	b.n	80065ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fa7d 	bl	8006a26 <USBD_CtlError>
            err++;
 800652c:	7afb      	ldrb	r3, [r7, #11]
 800652e:	3301      	adds	r3, #1
 8006530:	72fb      	strb	r3, [r7, #11]
          break;
 8006532:	e03b      	b.n	80065ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	7c12      	ldrb	r2, [r2, #16]
 800654c:	f107 0108 	add.w	r1, r7, #8
 8006550:	4610      	mov	r0, r2
 8006552:	4798      	blx	r3
 8006554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006556:	e029      	b.n	80065ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fa63 	bl	8006a26 <USBD_CtlError>
            err++;
 8006560:	7afb      	ldrb	r3, [r7, #11]
 8006562:	3301      	adds	r3, #1
 8006564:	72fb      	strb	r3, [r7, #11]
          break;
 8006566:	e021      	b.n	80065ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	7c12      	ldrb	r2, [r2, #16]
 8006580:	f107 0108 	add.w	r1, r7, #8
 8006584:	4610      	mov	r0, r2
 8006586:	4798      	blx	r3
 8006588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800658a:	e00f      	b.n	80065ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fa49 	bl	8006a26 <USBD_CtlError>
            err++;
 8006594:	7afb      	ldrb	r3, [r7, #11]
 8006596:	3301      	adds	r3, #1
 8006598:	72fb      	strb	r3, [r7, #11]
          break;
 800659a:	e007      	b.n	80065ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fa41 	bl	8006a26 <USBD_CtlError>
          err++;
 80065a4:	7afb      	ldrb	r3, [r7, #11]
 80065a6:	3301      	adds	r3, #1
 80065a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80065aa:	bf00      	nop
      }
      break;
 80065ac:	e037      	b.n	800661e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	7c1b      	ldrb	r3, [r3, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d109      	bne.n	80065ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065be:	f107 0208 	add.w	r2, r7, #8
 80065c2:	4610      	mov	r0, r2
 80065c4:	4798      	blx	r3
 80065c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065c8:	e029      	b.n	800661e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fa2a 	bl	8006a26 <USBD_CtlError>
        err++;
 80065d2:	7afb      	ldrb	r3, [r7, #11]
 80065d4:	3301      	adds	r3, #1
 80065d6:	72fb      	strb	r3, [r7, #11]
      break;
 80065d8:	e021      	b.n	800661e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	7c1b      	ldrb	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10d      	bne.n	80065fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ea:	f107 0208 	add.w	r2, r7, #8
 80065ee:	4610      	mov	r0, r2
 80065f0:	4798      	blx	r3
 80065f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3301      	adds	r3, #1
 80065f8:	2207      	movs	r2, #7
 80065fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065fc:	e00f      	b.n	800661e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fa10 	bl	8006a26 <USBD_CtlError>
        err++;
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	3301      	adds	r3, #1
 800660a:	72fb      	strb	r3, [r7, #11]
      break;
 800660c:	e007      	b.n	800661e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fa08 	bl	8006a26 <USBD_CtlError>
      err++;
 8006616:	7afb      	ldrb	r3, [r7, #11]
 8006618:	3301      	adds	r3, #1
 800661a:	72fb      	strb	r3, [r7, #11]
      break;
 800661c:	bf00      	nop
  }

  if (err != 0U)
 800661e:	7afb      	ldrb	r3, [r7, #11]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d11e      	bne.n	8006662 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	88db      	ldrh	r3, [r3, #6]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d016      	beq.n	800665a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800662c:	893b      	ldrh	r3, [r7, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00e      	beq.n	8006650 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	88da      	ldrh	r2, [r3, #6]
 8006636:	893b      	ldrh	r3, [r7, #8]
 8006638:	4293      	cmp	r3, r2
 800663a:	bf28      	it	cs
 800663c:	4613      	movcs	r3, r2
 800663e:	b29b      	uxth	r3, r3
 8006640:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006642:	893b      	ldrh	r3, [r7, #8]
 8006644:	461a      	mov	r2, r3
 8006646:	68f9      	ldr	r1, [r7, #12]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fa5d 	bl	8006b08 <USBD_CtlSendData>
 800664e:	e009      	b.n	8006664 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f9e7 	bl	8006a26 <USBD_CtlError>
 8006658:	e004      	b.n	8006664 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 faae 	bl	8006bbc <USBD_CtlSendStatus>
 8006660:	e000      	b.n	8006664 <USBD_GetDescriptor+0x2cc>
    return;
 8006662:	bf00      	nop
  }
}
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop

0800666c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	889b      	ldrh	r3, [r3, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d131      	bne.n	80066e2 <USBD_SetAddress+0x76>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	88db      	ldrh	r3, [r3, #6]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d12d      	bne.n	80066e2 <USBD_SetAddress+0x76>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	885b      	ldrh	r3, [r3, #2]
 800668a:	2b7f      	cmp	r3, #127	; 0x7f
 800668c:	d829      	bhi.n	80066e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	885b      	ldrh	r3, [r3, #2]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006698:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d104      	bne.n	80066b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f9bc 	bl	8006a26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ae:	e01d      	b.n	80066ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	7bfa      	ldrb	r2, [r7, #15]
 80066b4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 ff1f 	bl	8007500 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa7a 	bl	8006bbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d004      	beq.n	80066d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066d6:	e009      	b.n	80066ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e0:	e004      	b.n	80066ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f99e 	bl	8006a26 <USBD_CtlError>
  }
}
 80066ea:	bf00      	nop
 80066ec:	bf00      	nop
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	885b      	ldrh	r3, [r3, #2]
 8006706:	b2da      	uxtb	r2, r3
 8006708:	4b4e      	ldr	r3, [pc, #312]	; (8006844 <USBD_SetConfig+0x150>)
 800670a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800670c:	4b4d      	ldr	r3, [pc, #308]	; (8006844 <USBD_SetConfig+0x150>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d905      	bls.n	8006720 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f985 	bl	8006a26 <USBD_CtlError>
    return USBD_FAIL;
 800671c:	2303      	movs	r3, #3
 800671e:	e08c      	b.n	800683a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d002      	beq.n	8006732 <USBD_SetConfig+0x3e>
 800672c:	2b03      	cmp	r3, #3
 800672e:	d029      	beq.n	8006784 <USBD_SetConfig+0x90>
 8006730:	e075      	b.n	800681e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006732:	4b44      	ldr	r3, [pc, #272]	; (8006844 <USBD_SetConfig+0x150>)
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d020      	beq.n	800677c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800673a:	4b42      	ldr	r3, [pc, #264]	; (8006844 <USBD_SetConfig+0x150>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006744:	4b3f      	ldr	r3, [pc, #252]	; (8006844 <USBD_SetConfig+0x150>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fe ffe1 	bl	8005712 <USBD_SetClassConfig>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f962 	bl	8006a26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2202      	movs	r2, #2
 8006766:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800676a:	e065      	b.n	8006838 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fa25 	bl	8006bbc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2203      	movs	r2, #3
 8006776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800677a:	e05d      	b.n	8006838 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fa1d 	bl	8006bbc <USBD_CtlSendStatus>
      break;
 8006782:	e059      	b.n	8006838 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006784:	4b2f      	ldr	r3, [pc, #188]	; (8006844 <USBD_SetConfig+0x150>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d112      	bne.n	80067b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006794:	4b2b      	ldr	r3, [pc, #172]	; (8006844 <USBD_SetConfig+0x150>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	461a      	mov	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800679e:	4b29      	ldr	r3, [pc, #164]	; (8006844 <USBD_SetConfig+0x150>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7fe ffd0 	bl	800574a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fa06 	bl	8006bbc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80067b0:	e042      	b.n	8006838 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80067b2:	4b24      	ldr	r3, [pc, #144]	; (8006844 <USBD_SetConfig+0x150>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d02a      	beq.n	8006816 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7fe ffbe 	bl	800574a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80067ce:	4b1d      	ldr	r3, [pc, #116]	; (8006844 <USBD_SetConfig+0x150>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80067d8:	4b1a      	ldr	r3, [pc, #104]	; (8006844 <USBD_SetConfig+0x150>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7fe ff97 	bl	8005712 <USBD_SetClassConfig>
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00f      	beq.n	800680e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f918 	bl	8006a26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fe ffa3 	bl	800574a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800680c:	e014      	b.n	8006838 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f9d4 	bl	8006bbc <USBD_CtlSendStatus>
      break;
 8006814:	e010      	b.n	8006838 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f9d0 	bl	8006bbc <USBD_CtlSendStatus>
      break;
 800681c:	e00c      	b.n	8006838 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f900 	bl	8006a26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006826:	4b07      	ldr	r3, [pc, #28]	; (8006844 <USBD_SetConfig+0x150>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7fe ff8c 	bl	800574a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006832:	2303      	movs	r3, #3
 8006834:	73fb      	strb	r3, [r7, #15]
      break;
 8006836:	bf00      	nop
  }

  return ret;
 8006838:	7bfb      	ldrb	r3, [r7, #15]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	2000012c 	.word	0x2000012c

08006848 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	88db      	ldrh	r3, [r3, #6]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d004      	beq.n	8006864 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f8e2 	bl	8006a26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006862:	e023      	b.n	80068ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	dc02      	bgt.n	8006876 <USBD_GetConfig+0x2e>
 8006870:	2b00      	cmp	r3, #0
 8006872:	dc03      	bgt.n	800687c <USBD_GetConfig+0x34>
 8006874:	e015      	b.n	80068a2 <USBD_GetConfig+0x5a>
 8006876:	2b03      	cmp	r3, #3
 8006878:	d00b      	beq.n	8006892 <USBD_GetConfig+0x4a>
 800687a:	e012      	b.n	80068a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3308      	adds	r3, #8
 8006886:	2201      	movs	r2, #1
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f93c 	bl	8006b08 <USBD_CtlSendData>
        break;
 8006890:	e00c      	b.n	80068ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3304      	adds	r3, #4
 8006896:	2201      	movs	r2, #1
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f934 	bl	8006b08 <USBD_CtlSendData>
        break;
 80068a0:	e004      	b.n	80068ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f8be 	bl	8006a26 <USBD_CtlError>
        break;
 80068aa:	bf00      	nop
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	3b01      	subs	r3, #1
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d81e      	bhi.n	800690a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	88db      	ldrh	r3, [r3, #6]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d004      	beq.n	80068de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f8a5 	bl	8006a26 <USBD_CtlError>
        break;
 80068dc:	e01a      	b.n	8006914 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d005      	beq.n	80068fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f043 0202 	orr.w	r2, r3, #2
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	330c      	adds	r3, #12
 80068fe:	2202      	movs	r2, #2
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f900 	bl	8006b08 <USBD_CtlSendData>
      break;
 8006908:	e004      	b.n	8006914 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f88a 	bl	8006a26 <USBD_CtlError>
      break;
 8006912:	bf00      	nop
  }
}
 8006914:	bf00      	nop
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	885b      	ldrh	r3, [r3, #2]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d107      	bne.n	800693e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f940 	bl	8006bbc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800693c:	e013      	b.n	8006966 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	885b      	ldrh	r3, [r3, #2]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d10b      	bne.n	800695e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	889b      	ldrh	r3, [r3, #4]
 800694a:	0a1b      	lsrs	r3, r3, #8
 800694c:	b29b      	uxth	r3, r3
 800694e:	b2da      	uxtb	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f930 	bl	8006bbc <USBD_CtlSendStatus>
}
 800695c:	e003      	b.n	8006966 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f860 	bl	8006a26 <USBD_CtlError>
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b082      	sub	sp, #8
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800697e:	b2db      	uxtb	r3, r3
 8006980:	3b01      	subs	r3, #1
 8006982:	2b02      	cmp	r3, #2
 8006984:	d80b      	bhi.n	800699e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	885b      	ldrh	r3, [r3, #2]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d10c      	bne.n	80069a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f910 	bl	8006bbc <USBD_CtlSendStatus>
      }
      break;
 800699c:	e004      	b.n	80069a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f840 	bl	8006a26 <USBD_CtlError>
      break;
 80069a6:	e000      	b.n	80069aa <USBD_ClrFeature+0x3c>
      break;
 80069a8:	bf00      	nop
  }
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	781a      	ldrb	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3301      	adds	r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	781a      	ldrb	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	3301      	adds	r3, #1
 80069da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f7ff fa41 	bl	8005e64 <SWAPBYTE>
 80069e2:	4603      	mov	r3, r0
 80069e4:	461a      	mov	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3301      	adds	r3, #1
 80069ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3301      	adds	r3, #1
 80069f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f7ff fa34 	bl	8005e64 <SWAPBYTE>
 80069fc:	4603      	mov	r3, r0
 80069fe:	461a      	mov	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3301      	adds	r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f7ff fa27 	bl	8005e64 <SWAPBYTE>
 8006a16:	4603      	mov	r3, r0
 8006a18:	461a      	mov	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	80da      	strh	r2, [r3, #6]
}
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b082      	sub	sp, #8
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a30:	2180      	movs	r1, #128	; 0x80
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fcfa 	bl	800742c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006a38:	2100      	movs	r1, #0
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fcf6 	bl	800742c <USBD_LL_StallEP>
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d036      	beq.n	8006acc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006a62:	6938      	ldr	r0, [r7, #16]
 8006a64:	f000 f836 	bl	8006ad4 <USBD_GetLen>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	7812      	ldrb	r2, [r2, #0]
 8006a80:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
 8006a84:	3301      	adds	r3, #1
 8006a86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	2203      	movs	r2, #3
 8006a90:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a92:	7dfb      	ldrb	r3, [r7, #23]
 8006a94:	3301      	adds	r3, #1
 8006a96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a98:	e013      	b.n	8006ac2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	7812      	ldrb	r2, [r2, #0]
 8006aa4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	613b      	str	r3, [r7, #16]
    idx++;
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
    idx++;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e7      	bne.n	8006a9a <USBD_GetString+0x52>
 8006aca:	e000      	b.n	8006ace <USBD_GetString+0x86>
    return;
 8006acc:	bf00      	nop
  }
}
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ae4:	e005      	b.n	8006af2 <USBD_GetLen+0x1e>
  {
    len++;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	3301      	adds	r3, #1
 8006af0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f5      	bne.n	8006ae6 <USBD_GetLen+0x12>
  }

  return len;
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fd05 	bl	800753e <USBD_LL_Transmit>

  return USBD_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	2100      	movs	r1, #0
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 fcf4 	bl	800753e <USBD_LL_Transmit>

  return USBD_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2203      	movs	r2, #3
 8006b70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	2100      	movs	r1, #0
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 fcf8 	bl	8007580 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	2100      	movs	r1, #0
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 fce7 	bl	8007580 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2204      	movs	r2, #4
 8006bc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006bcc:	2300      	movs	r3, #0
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fcb3 	bl	800753e <USBD_LL_Transmit>

  return USBD_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2205      	movs	r2, #5
 8006bee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fcc1 	bl	8007580 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4912      	ldr	r1, [pc, #72]	; (8006c58 <MX_USB_DEVICE_Init+0x50>)
 8006c10:	4812      	ldr	r0, [pc, #72]	; (8006c5c <MX_USB_DEVICE_Init+0x54>)
 8006c12:	f7fe fd01 	bl	8005618 <USBD_Init>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006c1c:	f7fa f9a0 	bl	8000f60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006c20:	490f      	ldr	r1, [pc, #60]	; (8006c60 <MX_USB_DEVICE_Init+0x58>)
 8006c22:	480e      	ldr	r0, [pc, #56]	; (8006c5c <MX_USB_DEVICE_Init+0x54>)
 8006c24:	f7fe fd28 	bl	8005678 <USBD_RegisterClass>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006c2e:	f7fa f997 	bl	8000f60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006c32:	490c      	ldr	r1, [pc, #48]	; (8006c64 <MX_USB_DEVICE_Init+0x5c>)
 8006c34:	4809      	ldr	r0, [pc, #36]	; (8006c5c <MX_USB_DEVICE_Init+0x54>)
 8006c36:	f7fe fc1f 	bl	8005478 <USBD_CDC_RegisterInterface>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006c40:	f7fa f98e 	bl	8000f60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c44:	4805      	ldr	r0, [pc, #20]	; (8006c5c <MX_USB_DEVICE_Init+0x54>)
 8006c46:	f7fe fd4d 	bl	80056e4 <USBD_Start>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006c50:	f7fa f986 	bl	8000f60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c54:	bf00      	nop
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	200000ac 	.word	0x200000ac
 8006c5c:	20000130 	.word	0x20000130
 8006c60:	20000018 	.word	0x20000018
 8006c64:	20000098 	.word	0x20000098

08006c68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	4905      	ldr	r1, [pc, #20]	; (8006c84 <CDC_Init_FS+0x1c>)
 8006c70:	4805      	ldr	r0, [pc, #20]	; (8006c88 <CDC_Init_FS+0x20>)
 8006c72:	f7fe fc1b 	bl	80054ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006c76:	4905      	ldr	r1, [pc, #20]	; (8006c8c <CDC_Init_FS+0x24>)
 8006c78:	4803      	ldr	r0, [pc, #12]	; (8006c88 <CDC_Init_FS+0x20>)
 8006c7a:	f7fe fc39 	bl	80054f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006c7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000c0c 	.word	0x20000c0c
 8006c88:	20000130 	.word	0x20000130
 8006c8c:	2000040c 	.word	0x2000040c

08006c90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	6039      	str	r1, [r7, #0]
 8006caa:	71fb      	strb	r3, [r7, #7]
 8006cac:	4613      	mov	r3, r2
 8006cae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	2b23      	cmp	r3, #35	; 0x23
 8006cb4:	d84a      	bhi.n	8006d4c <CDC_Control_FS+0xac>
 8006cb6:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <CDC_Control_FS+0x1c>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006d4d 	.word	0x08006d4d
 8006cc0:	08006d4d 	.word	0x08006d4d
 8006cc4:	08006d4d 	.word	0x08006d4d
 8006cc8:	08006d4d 	.word	0x08006d4d
 8006ccc:	08006d4d 	.word	0x08006d4d
 8006cd0:	08006d4d 	.word	0x08006d4d
 8006cd4:	08006d4d 	.word	0x08006d4d
 8006cd8:	08006d4d 	.word	0x08006d4d
 8006cdc:	08006d4d 	.word	0x08006d4d
 8006ce0:	08006d4d 	.word	0x08006d4d
 8006ce4:	08006d4d 	.word	0x08006d4d
 8006ce8:	08006d4d 	.word	0x08006d4d
 8006cec:	08006d4d 	.word	0x08006d4d
 8006cf0:	08006d4d 	.word	0x08006d4d
 8006cf4:	08006d4d 	.word	0x08006d4d
 8006cf8:	08006d4d 	.word	0x08006d4d
 8006cfc:	08006d4d 	.word	0x08006d4d
 8006d00:	08006d4d 	.word	0x08006d4d
 8006d04:	08006d4d 	.word	0x08006d4d
 8006d08:	08006d4d 	.word	0x08006d4d
 8006d0c:	08006d4d 	.word	0x08006d4d
 8006d10:	08006d4d 	.word	0x08006d4d
 8006d14:	08006d4d 	.word	0x08006d4d
 8006d18:	08006d4d 	.word	0x08006d4d
 8006d1c:	08006d4d 	.word	0x08006d4d
 8006d20:	08006d4d 	.word	0x08006d4d
 8006d24:	08006d4d 	.word	0x08006d4d
 8006d28:	08006d4d 	.word	0x08006d4d
 8006d2c:	08006d4d 	.word	0x08006d4d
 8006d30:	08006d4d 	.word	0x08006d4d
 8006d34:	08006d4d 	.word	0x08006d4d
 8006d38:	08006d4d 	.word	0x08006d4d
 8006d3c:	08006d4d 	.word	0x08006d4d
 8006d40:	08006d4d 	.word	0x08006d4d
 8006d44:	08006d4d 	.word	0x08006d4d
 8006d48:	08006d4d 	.word	0x08006d4d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006d4c:	bf00      	nop
  }

  return (USBD_OK);
 8006d4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  float speed = getSpeed();
 8006d66:	f7fa f901 	bl	8000f6c <getSpeed>
 8006d6a:	eef0 7a40 	vmov.f32	s15, s0
 8006d6e:	edc7 7a03 	vstr	s15, [r7, #12]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	4808      	ldr	r0, [pc, #32]	; (8006d98 <CDC_Receive_FS+0x3c>)
 8006d76:	f7fe fbbb 	bl	80054f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006d7a:	4807      	ldr	r0, [pc, #28]	; (8006d98 <CDC_Receive_FS+0x3c>)
 8006d7c:	f7fe fc16 	bl	80055ac <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS((unsigned char *)&speed, sizeof(speed));
 8006d80:	f107 030c 	add.w	r3, r7, #12
 8006d84:	2104      	movs	r1, #4
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f808 	bl	8006d9c <CDC_Transmit_FS>
  return (USBD_OK);
 8006d8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000130 	.word	0x20000130

08006d9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006dac:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <CDC_Transmit_FS+0x48>)
 8006dae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006db2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e00b      	b.n	8006dda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006dc2:	887b      	ldrh	r3, [r7, #2]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	4806      	ldr	r0, [pc, #24]	; (8006de4 <CDC_Transmit_FS+0x48>)
 8006dca:	f7fe fb6f 	bl	80054ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006dce:	4805      	ldr	r0, [pc, #20]	; (8006de4 <CDC_Transmit_FS+0x48>)
 8006dd0:	f7fe fbac 	bl	800552c <USBD_CDC_TransmitPacket>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20000130 	.word	0x20000130

08006de8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	4613      	mov	r3, r2
 8006df4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	371c      	adds	r7, #28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
	...

08006e0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	4603      	mov	r3, r0
 8006e14:	6039      	str	r1, [r7, #0]
 8006e16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2212      	movs	r2, #18
 8006e1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e1e:	4b03      	ldr	r3, [pc, #12]	; (8006e2c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	200000c8 	.word	0x200000c8

08006e30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	6039      	str	r1, [r7, #0]
 8006e3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2204      	movs	r2, #4
 8006e40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e42:	4b03      	ldr	r3, [pc, #12]	; (8006e50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	200000dc 	.word	0x200000dc

08006e54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	6039      	str	r1, [r7, #0]
 8006e5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d105      	bne.n	8006e72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	4907      	ldr	r1, [pc, #28]	; (8006e88 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e6a:	4808      	ldr	r0, [pc, #32]	; (8006e8c <USBD_FS_ProductStrDescriptor+0x38>)
 8006e6c:	f7ff fdec 	bl	8006a48 <USBD_GetString>
 8006e70:	e004      	b.n	8006e7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	4904      	ldr	r1, [pc, #16]	; (8006e88 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e76:	4805      	ldr	r0, [pc, #20]	; (8006e8c <USBD_FS_ProductStrDescriptor+0x38>)
 8006e78:	f7ff fde6 	bl	8006a48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e7c:	4b02      	ldr	r3, [pc, #8]	; (8006e88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	2000140c 	.word	0x2000140c
 8006e8c:	080076e0 	.word	0x080076e0

08006e90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	6039      	str	r1, [r7, #0]
 8006e9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	4904      	ldr	r1, [pc, #16]	; (8006eb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006ea0:	4804      	ldr	r0, [pc, #16]	; (8006eb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ea2:	f7ff fdd1 	bl	8006a48 <USBD_GetString>
  return USBD_StrDesc;
 8006ea6:	4b02      	ldr	r3, [pc, #8]	; (8006eb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	2000140c 	.word	0x2000140c
 8006eb4:	080076f8 	.word	0x080076f8

08006eb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	6039      	str	r1, [r7, #0]
 8006ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	221a      	movs	r2, #26
 8006ec8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006eca:	f000 f843 	bl	8006f54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006ece:	4b02      	ldr	r3, [pc, #8]	; (8006ed8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	200000e0 	.word	0x200000e0

08006edc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	6039      	str	r1, [r7, #0]
 8006ee6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ee8:	79fb      	ldrb	r3, [r7, #7]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d105      	bne.n	8006efa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	4907      	ldr	r1, [pc, #28]	; (8006f10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ef2:	4808      	ldr	r0, [pc, #32]	; (8006f14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ef4:	f7ff fda8 	bl	8006a48 <USBD_GetString>
 8006ef8:	e004      	b.n	8006f04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	4904      	ldr	r1, [pc, #16]	; (8006f10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006efe:	4805      	ldr	r0, [pc, #20]	; (8006f14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f00:	f7ff fda2 	bl	8006a48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f04:	4b02      	ldr	r3, [pc, #8]	; (8006f10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	2000140c 	.word	0x2000140c
 8006f14:	0800770c 	.word	0x0800770c

08006f18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	6039      	str	r1, [r7, #0]
 8006f22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d105      	bne.n	8006f36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	4907      	ldr	r1, [pc, #28]	; (8006f4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f2e:	4808      	ldr	r0, [pc, #32]	; (8006f50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f30:	f7ff fd8a 	bl	8006a48 <USBD_GetString>
 8006f34:	e004      	b.n	8006f40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	4904      	ldr	r1, [pc, #16]	; (8006f4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f3a:	4805      	ldr	r0, [pc, #20]	; (8006f50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f3c:	f7ff fd84 	bl	8006a48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f40:	4b02      	ldr	r3, [pc, #8]	; (8006f4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	2000140c 	.word	0x2000140c
 8006f50:	08007718 	.word	0x08007718

08006f54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f5a:	4b0f      	ldr	r3, [pc, #60]	; (8006f98 <Get_SerialNum+0x44>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f60:	4b0e      	ldr	r3, [pc, #56]	; (8006f9c <Get_SerialNum+0x48>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f66:	4b0e      	ldr	r3, [pc, #56]	; (8006fa0 <Get_SerialNum+0x4c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4413      	add	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f7a:	2208      	movs	r2, #8
 8006f7c:	4909      	ldr	r1, [pc, #36]	; (8006fa4 <Get_SerialNum+0x50>)
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 f814 	bl	8006fac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f84:	2204      	movs	r2, #4
 8006f86:	4908      	ldr	r1, [pc, #32]	; (8006fa8 <Get_SerialNum+0x54>)
 8006f88:	68b8      	ldr	r0, [r7, #8]
 8006f8a:	f000 f80f 	bl	8006fac <IntToUnicode>
  }
}
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	1fff7a10 	.word	0x1fff7a10
 8006f9c:	1fff7a14 	.word	0x1fff7a14
 8006fa0:	1fff7a18 	.word	0x1fff7a18
 8006fa4:	200000e2 	.word	0x200000e2
 8006fa8:	200000f2 	.word	0x200000f2

08006fac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75fb      	strb	r3, [r7, #23]
 8006fc2:	e027      	b.n	8007014 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	0f1b      	lsrs	r3, r3, #28
 8006fc8:	2b09      	cmp	r3, #9
 8006fca:	d80b      	bhi.n	8006fe4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	0f1b      	lsrs	r3, r3, #28
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	440b      	add	r3, r1
 8006fdc:	3230      	adds	r2, #48	; 0x30
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	e00a      	b.n	8006ffa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	0f1b      	lsrs	r3, r3, #28
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	4619      	mov	r1, r3
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	440b      	add	r3, r1
 8006ff4:	3237      	adds	r2, #55	; 0x37
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007000:	7dfb      	ldrb	r3, [r7, #23]
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	3301      	adds	r3, #1
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	4413      	add	r3, r2
 800700a:	2200      	movs	r2, #0
 800700c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	3301      	adds	r3, #1
 8007012:	75fb      	strb	r3, [r7, #23]
 8007014:	7dfa      	ldrb	r2, [r7, #23]
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	429a      	cmp	r2, r3
 800701a:	d3d3      	bcc.n	8006fc4 <IntToUnicode+0x18>
  }
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
	...

0800702c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08a      	sub	sp, #40	; 0x28
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007034:	f107 0314 	add.w	r3, r7, #20
 8007038:	2200      	movs	r2, #0
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	605a      	str	r2, [r3, #4]
 800703e:	609a      	str	r2, [r3, #8]
 8007040:	60da      	str	r2, [r3, #12]
 8007042:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800704c:	d147      	bne.n	80070de <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800704e:	2300      	movs	r3, #0
 8007050:	613b      	str	r3, [r7, #16]
 8007052:	4b25      	ldr	r3, [pc, #148]	; (80070e8 <HAL_PCD_MspInit+0xbc>)
 8007054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007056:	4a24      	ldr	r2, [pc, #144]	; (80070e8 <HAL_PCD_MspInit+0xbc>)
 8007058:	f043 0301 	orr.w	r3, r3, #1
 800705c:	6313      	str	r3, [r2, #48]	; 0x30
 800705e:	4b22      	ldr	r3, [pc, #136]	; (80070e8 <HAL_PCD_MspInit+0xbc>)
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800706a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800706e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007070:	2300      	movs	r3, #0
 8007072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007074:	2300      	movs	r3, #0
 8007076:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007078:	f107 0314 	add.w	r3, r7, #20
 800707c:	4619      	mov	r1, r3
 800707e:	481b      	ldr	r0, [pc, #108]	; (80070ec <HAL_PCD_MspInit+0xc0>)
 8007080:	f7fa fa1e 	bl	80014c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007084:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800708a:	2302      	movs	r3, #2
 800708c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800708e:	2300      	movs	r3, #0
 8007090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007092:	2300      	movs	r3, #0
 8007094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007096:	230a      	movs	r3, #10
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800709a:	f107 0314 	add.w	r3, r7, #20
 800709e:	4619      	mov	r1, r3
 80070a0:	4812      	ldr	r0, [pc, #72]	; (80070ec <HAL_PCD_MspInit+0xc0>)
 80070a2:	f7fa fa0d 	bl	80014c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80070a6:	4b10      	ldr	r3, [pc, #64]	; (80070e8 <HAL_PCD_MspInit+0xbc>)
 80070a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070aa:	4a0f      	ldr	r2, [pc, #60]	; (80070e8 <HAL_PCD_MspInit+0xbc>)
 80070ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b0:	6353      	str	r3, [r2, #52]	; 0x34
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	4b0c      	ldr	r3, [pc, #48]	; (80070e8 <HAL_PCD_MspInit+0xbc>)
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ba:	4a0b      	ldr	r2, [pc, #44]	; (80070e8 <HAL_PCD_MspInit+0xbc>)
 80070bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070c0:	6453      	str	r3, [r2, #68]	; 0x44
 80070c2:	4b09      	ldr	r3, [pc, #36]	; (80070e8 <HAL_PCD_MspInit+0xbc>)
 80070c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80070ce:	2200      	movs	r2, #0
 80070d0:	2100      	movs	r1, #0
 80070d2:	2043      	movs	r0, #67	; 0x43
 80070d4:	f7fa f9bd 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80070d8:	2043      	movs	r0, #67	; 0x43
 80070da:	f7fa f9d6 	bl	800148a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80070de:	bf00      	nop
 80070e0:	3728      	adds	r7, #40	; 0x28
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	40023800 	.word	0x40023800
 80070ec:	40020000 	.word	0x40020000

080070f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007104:	4619      	mov	r1, r3
 8007106:	4610      	mov	r0, r2
 8007108:	f7fe fb39 	bl	800577e <USBD_LL_SetupStage>
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007126:	78fa      	ldrb	r2, [r7, #3]
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	4613      	mov	r3, r2
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	4413      	add	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	440b      	add	r3, r1
 8007134:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	4619      	mov	r1, r3
 800713e:	f7fe fb73 	bl	8005828 <USBD_LL_DataOutStage>
}
 8007142:	bf00      	nop
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800715c:	78fa      	ldrb	r2, [r7, #3]
 800715e:	6879      	ldr	r1, [r7, #4]
 8007160:	4613      	mov	r3, r2
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	3320      	adds	r3, #32
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	4619      	mov	r1, r3
 8007172:	f7fe fc0c 	bl	800598e <USBD_LL_DataInStage>
}
 8007176:	bf00      	nop
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe fd46 	bl	8005c1e <USBD_LL_SOF>
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80071a2:	2301      	movs	r3, #1
 80071a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	79db      	ldrb	r3, [r3, #7]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d102      	bne.n	80071b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
 80071b2:	e008      	b.n	80071c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	79db      	ldrb	r3, [r3, #7]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d102      	bne.n	80071c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
 80071c0:	e001      	b.n	80071c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80071c2:	f7f9 fecd 	bl	8000f60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80071cc:	7bfa      	ldrb	r2, [r7, #15]
 80071ce:	4611      	mov	r1, r2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fe fce0 	bl	8005b96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fe fc88 	bl	8005af2 <USBD_LL_Reset>
}
 80071e2:	bf00      	nop
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fe fcdb 	bl	8005bb6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007212:	f043 0301 	orr.w	r3, r3, #1
 8007216:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	7adb      	ldrb	r3, [r3, #11]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007220:	4b04      	ldr	r3, [pc, #16]	; (8007234 <HAL_PCD_SuspendCallback+0x48>)
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	4a03      	ldr	r2, [pc, #12]	; (8007234 <HAL_PCD_SuspendCallback+0x48>)
 8007226:	f043 0306 	orr.w	r3, r3, #6
 800722a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	e000ed00 	.word	0xe000ed00

08007238 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fcd1 	bl	8005bee <USBD_LL_Resume>
}
 800724c:	bf00      	nop
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007266:	78fa      	ldrb	r2, [r7, #3]
 8007268:	4611      	mov	r1, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fd29 	bl	8005cc2 <USBD_LL_IsoOUTIncomplete>
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800728a:	78fa      	ldrb	r2, [r7, #3]
 800728c:	4611      	mov	r1, r2
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe fce5 	bl	8005c5e <USBD_LL_IsoINIncomplete>
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fd3b 	bl	8005d26 <USBD_LL_DevConnected>
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe fd38 	bl	8005d3c <USBD_LL_DevDisconnected>
}
 80072cc:	bf00      	nop
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d13c      	bne.n	800735e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80072e4:	4a20      	ldr	r2, [pc, #128]	; (8007368 <USBD_LL_Init+0x94>)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a1e      	ldr	r2, [pc, #120]	; (8007368 <USBD_LL_Init+0x94>)
 80072f0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072f4:	4b1c      	ldr	r3, [pc, #112]	; (8007368 <USBD_LL_Init+0x94>)
 80072f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80072fc:	4b1a      	ldr	r3, [pc, #104]	; (8007368 <USBD_LL_Init+0x94>)
 80072fe:	2204      	movs	r2, #4
 8007300:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007302:	4b19      	ldr	r3, [pc, #100]	; (8007368 <USBD_LL_Init+0x94>)
 8007304:	2202      	movs	r2, #2
 8007306:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007308:	4b17      	ldr	r3, [pc, #92]	; (8007368 <USBD_LL_Init+0x94>)
 800730a:	2200      	movs	r2, #0
 800730c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800730e:	4b16      	ldr	r3, [pc, #88]	; (8007368 <USBD_LL_Init+0x94>)
 8007310:	2202      	movs	r2, #2
 8007312:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007314:	4b14      	ldr	r3, [pc, #80]	; (8007368 <USBD_LL_Init+0x94>)
 8007316:	2200      	movs	r2, #0
 8007318:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800731a:	4b13      	ldr	r3, [pc, #76]	; (8007368 <USBD_LL_Init+0x94>)
 800731c:	2200      	movs	r2, #0
 800731e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007320:	4b11      	ldr	r3, [pc, #68]	; (8007368 <USBD_LL_Init+0x94>)
 8007322:	2200      	movs	r2, #0
 8007324:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007326:	4b10      	ldr	r3, [pc, #64]	; (8007368 <USBD_LL_Init+0x94>)
 8007328:	2200      	movs	r2, #0
 800732a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800732c:	4b0e      	ldr	r3, [pc, #56]	; (8007368 <USBD_LL_Init+0x94>)
 800732e:	2200      	movs	r2, #0
 8007330:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007332:	480d      	ldr	r0, [pc, #52]	; (8007368 <USBD_LL_Init+0x94>)
 8007334:	f7fa fa9d 	bl	8001872 <HAL_PCD_Init>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800733e:	f7f9 fe0f 	bl	8000f60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007342:	2180      	movs	r1, #128	; 0x80
 8007344:	4808      	ldr	r0, [pc, #32]	; (8007368 <USBD_LL_Init+0x94>)
 8007346:	f7fb fcc8 	bl	8002cda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800734a:	2240      	movs	r2, #64	; 0x40
 800734c:	2100      	movs	r1, #0
 800734e:	4806      	ldr	r0, [pc, #24]	; (8007368 <USBD_LL_Init+0x94>)
 8007350:	f7fb fc7c 	bl	8002c4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007354:	2280      	movs	r2, #128	; 0x80
 8007356:	2101      	movs	r1, #1
 8007358:	4803      	ldr	r0, [pc, #12]	; (8007368 <USBD_LL_Init+0x94>)
 800735a:	f7fb fc77 	bl	8002c4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	2000160c 	.word	0x2000160c

0800736c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007382:	4618      	mov	r0, r3
 8007384:	f7fa fb84 	bl	8001a90 <HAL_PCD_Start>
 8007388:	4603      	mov	r3, r0
 800738a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800738c:	7bfb      	ldrb	r3, [r7, #15]
 800738e:	4618      	mov	r0, r3
 8007390:	f000 f942 	bl	8007618 <USBD_Get_USB_Status>
 8007394:	4603      	mov	r3, r0
 8007396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007398:	7bbb      	ldrb	r3, [r7, #14]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	4608      	mov	r0, r1
 80073ac:	4611      	mov	r1, r2
 80073ae:	461a      	mov	r2, r3
 80073b0:	4603      	mov	r3, r0
 80073b2:	70fb      	strb	r3, [r7, #3]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70bb      	strb	r3, [r7, #2]
 80073b8:	4613      	mov	r3, r2
 80073ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80073ca:	78bb      	ldrb	r3, [r7, #2]
 80073cc:	883a      	ldrh	r2, [r7, #0]
 80073ce:	78f9      	ldrb	r1, [r7, #3]
 80073d0:	f7fb f858 	bl	8002484 <HAL_PCD_EP_Open>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 f91c 	bl	8007618 <USBD_Get_USB_Status>
 80073e0:	4603      	mov	r3, r0
 80073e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	460b      	mov	r3, r1
 80073f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007408:	78fa      	ldrb	r2, [r7, #3]
 800740a:	4611      	mov	r1, r2
 800740c:	4618      	mov	r0, r3
 800740e:	f7fb f8a1 	bl	8002554 <HAL_PCD_EP_Close>
 8007412:	4603      	mov	r3, r0
 8007414:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	4618      	mov	r0, r3
 800741a:	f000 f8fd 	bl	8007618 <USBD_Get_USB_Status>
 800741e:	4603      	mov	r3, r0
 8007420:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007422:	7bbb      	ldrb	r3, [r7, #14]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007446:	78fa      	ldrb	r2, [r7, #3]
 8007448:	4611      	mov	r1, r2
 800744a:	4618      	mov	r0, r3
 800744c:	f7fb f959 	bl	8002702 <HAL_PCD_EP_SetStall>
 8007450:	4603      	mov	r3, r0
 8007452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	4618      	mov	r0, r3
 8007458:	f000 f8de 	bl	8007618 <USBD_Get_USB_Status>
 800745c:	4603      	mov	r3, r0
 800745e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007460:	7bbb      	ldrb	r3, [r7, #14]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	460b      	mov	r3, r1
 8007474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007484:	78fa      	ldrb	r2, [r7, #3]
 8007486:	4611      	mov	r1, r2
 8007488:	4618      	mov	r0, r3
 800748a:	f7fb f99d 	bl	80027c8 <HAL_PCD_EP_ClrStall>
 800748e:	4603      	mov	r3, r0
 8007490:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	4618      	mov	r0, r3
 8007496:	f000 f8bf 	bl	8007618 <USBD_Get_USB_Status>
 800749a:	4603      	mov	r3, r0
 800749c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800749e:	7bbb      	ldrb	r3, [r7, #14]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80074bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	da0b      	bge.n	80074dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074ca:	68f9      	ldr	r1, [r7, #12]
 80074cc:	4613      	mov	r3, r2
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	3316      	adds	r3, #22
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	e00b      	b.n	80074f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074dc:	78fb      	ldrb	r3, [r7, #3]
 80074de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074e2:	68f9      	ldr	r1, [r7, #12]
 80074e4:	4613      	mov	r3, r2
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	4413      	add	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	440b      	add	r3, r1
 80074ee:	f203 2356 	addw	r3, r3, #598	; 0x256
 80074f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800751a:	78fa      	ldrb	r2, [r7, #3]
 800751c:	4611      	mov	r1, r2
 800751e:	4618      	mov	r0, r3
 8007520:	f7fa ff8c 	bl	800243c <HAL_PCD_SetAddress>
 8007524:	4603      	mov	r3, r0
 8007526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	4618      	mov	r0, r3
 800752c:	f000 f874 	bl	8007618 <USBD_Get_USB_Status>
 8007530:	4603      	mov	r3, r0
 8007532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007534:	7bbb      	ldrb	r3, [r7, #14]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b086      	sub	sp, #24
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
 800754a:	460b      	mov	r3, r1
 800754c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800755c:	7af9      	ldrb	r1, [r7, #11]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	f7fb f894 	bl	800268e <HAL_PCD_EP_Transmit>
 8007566:	4603      	mov	r3, r0
 8007568:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800756a:	7dfb      	ldrb	r3, [r7, #23]
 800756c:	4618      	mov	r0, r3
 800756e:	f000 f853 	bl	8007618 <USBD_Get_USB_Status>
 8007572:	4603      	mov	r3, r0
 8007574:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007576:	7dbb      	ldrb	r3, [r7, #22]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	607a      	str	r2, [r7, #4]
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	460b      	mov	r3, r1
 800758e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800759e:	7af9      	ldrb	r1, [r7, #11]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	f7fb f820 	bl	80025e8 <HAL_PCD_EP_Receive>
 80075a8:	4603      	mov	r3, r0
 80075aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 f832 	bl	8007618 <USBD_Get_USB_Status>
 80075b4:	4603      	mov	r3, r0
 80075b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075d4:	78fa      	ldrb	r2, [r7, #3]
 80075d6:	4611      	mov	r1, r2
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fb f840 	bl	800265e <HAL_PCD_EP_GetRxCount>
 80075de:	4603      	mov	r3, r0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80075f0:	4b03      	ldr	r3, [pc, #12]	; (8007600 <USBD_static_malloc+0x18>)
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	20001af0 	.word	0x20001af0

08007604 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]

}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	2b03      	cmp	r3, #3
 800762a:	d817      	bhi.n	800765c <USBD_Get_USB_Status+0x44>
 800762c:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <USBD_Get_USB_Status+0x1c>)
 800762e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007632:	bf00      	nop
 8007634:	08007645 	.word	0x08007645
 8007638:	0800764b 	.word	0x0800764b
 800763c:	08007651 	.word	0x08007651
 8007640:	08007657 	.word	0x08007657
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	73fb      	strb	r3, [r7, #15]
    break;
 8007648:	e00b      	b.n	8007662 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800764a:	2303      	movs	r3, #3
 800764c:	73fb      	strb	r3, [r7, #15]
    break;
 800764e:	e008      	b.n	8007662 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007650:	2301      	movs	r3, #1
 8007652:	73fb      	strb	r3, [r7, #15]
    break;
 8007654:	e005      	b.n	8007662 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007656:	2303      	movs	r3, #3
 8007658:	73fb      	strb	r3, [r7, #15]
    break;
 800765a:	e002      	b.n	8007662 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800765c:	2303      	movs	r3, #3
 800765e:	73fb      	strb	r3, [r7, #15]
    break;
 8007660:	bf00      	nop
  }
  return usb_status;
 8007662:	7bfb      	ldrb	r3, [r7, #15]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <memset>:
 8007670:	4402      	add	r2, r0
 8007672:	4603      	mov	r3, r0
 8007674:	4293      	cmp	r3, r2
 8007676:	d100      	bne.n	800767a <memset+0xa>
 8007678:	4770      	bx	lr
 800767a:	f803 1b01 	strb.w	r1, [r3], #1
 800767e:	e7f9      	b.n	8007674 <memset+0x4>

08007680 <__libc_init_array>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	4d0d      	ldr	r5, [pc, #52]	; (80076b8 <__libc_init_array+0x38>)
 8007684:	4c0d      	ldr	r4, [pc, #52]	; (80076bc <__libc_init_array+0x3c>)
 8007686:	1b64      	subs	r4, r4, r5
 8007688:	10a4      	asrs	r4, r4, #2
 800768a:	2600      	movs	r6, #0
 800768c:	42a6      	cmp	r6, r4
 800768e:	d109      	bne.n	80076a4 <__libc_init_array+0x24>
 8007690:	4d0b      	ldr	r5, [pc, #44]	; (80076c0 <__libc_init_array+0x40>)
 8007692:	4c0c      	ldr	r4, [pc, #48]	; (80076c4 <__libc_init_array+0x44>)
 8007694:	f000 f818 	bl	80076c8 <_init>
 8007698:	1b64      	subs	r4, r4, r5
 800769a:	10a4      	asrs	r4, r4, #2
 800769c:	2600      	movs	r6, #0
 800769e:	42a6      	cmp	r6, r4
 80076a0:	d105      	bne.n	80076ae <__libc_init_array+0x2e>
 80076a2:	bd70      	pop	{r4, r5, r6, pc}
 80076a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a8:	4798      	blx	r3
 80076aa:	3601      	adds	r6, #1
 80076ac:	e7ee      	b.n	800768c <__libc_init_array+0xc>
 80076ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b2:	4798      	blx	r3
 80076b4:	3601      	adds	r6, #1
 80076b6:	e7f2      	b.n	800769e <__libc_init_array+0x1e>
 80076b8:	08007740 	.word	0x08007740
 80076bc:	08007740 	.word	0x08007740
 80076c0:	08007740 	.word	0x08007740
 80076c4:	08007744 	.word	0x08007744

080076c8 <_init>:
 80076c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ca:	bf00      	nop
 80076cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ce:	bc08      	pop	{r3}
 80076d0:	469e      	mov	lr, r3
 80076d2:	4770      	bx	lr

080076d4 <_fini>:
 80076d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d6:	bf00      	nop
 80076d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076da:	bc08      	pop	{r3}
 80076dc:	469e      	mov	lr, r3
 80076de:	4770      	bx	lr
